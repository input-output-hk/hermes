/// WASI Monotonic Clock is a clock API intended to let users measure elapsed
/// time.
///
/// It is intended to be portable at least between Unix-family platforms and
/// Windows.
///
/// A monotonic clock is a clock which has an unspecified initial value, and
/// successive reads of the clock will produce non-decreasing values.
///
/// It is intended for measuring elapsed time.
///
/// WASI Standard from: https://github.com/WebAssembly/wasi-clocks/blob/main/wit/monotonic-clock.wit
default interface monotonic-clock {

    /// A timestamp in nanoseconds.
    type instant = u64

    /// Read the current value of the clock.
    ///
    /// The clock is monotonic, therefore calling this function repeatedly will
    /// produce a sequence of non-decreasing values.
    now: func() -> instant

    /// Query the resolution of the clock.
    resolution: func() -> instant
}

/// Note:
/// The following was removed from the WASI standard because `poll` is incompatible
/// with the desired characteristics of the Hermes runtime.

    /// use poll.poll.{pollable}

    /// Create a `pollable` which will resolve once the specified time has been
    /// reached.
    ///subscribe: func(
    ///    when: instant,
    ///    absolute: bool
    ///) -> pollable
