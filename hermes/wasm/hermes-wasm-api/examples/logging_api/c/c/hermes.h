// Generated by `wit-bindgen` 0.4.0. DO NOT EDIT!
#ifndef __BINDINGS_HERMES_H
#define __BINDINGS_HERMES_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <stdbool.h>

typedef struct {
  char*ptr;
  size_t len;
} hermes_string_t;

// JSON is just a string.
// This type is used to indicate the string MUST be properly formatted JSON.
typedef hermes_string_t types_json_t;

// CBOR is a binary cbor data type.
// This type is used to indicate the binary array MUST be CBOR data.
typedef struct {
  uint8_t *ptr;
  size_t len;
} types_cbor_t;

typedef types_json_t logging_json_t;

// The supported logging levels
typedef uint8_t logging_level_t;

#define LOGGING_LEVEL_DEBUG 0
#define LOGGING_LEVEL_TRACE 1
#define LOGGING_LEVEL_INFO 2
#define LOGGING_LEVEL_WARN 3
#define LOGGING_LEVEL_ERROR 4
#define LOGGING_LEVEL_CRITICAL 5

// Imported Functions from `logging`
void logging_log(logging_level_t level, hermes_string_t *file, hermes_string_t *fn, uint32_t line, hermes_string_t *msg, logging_json_t *data);

// Exported Functions from `init`
bool init_init(void);

// Helper Functions

void types_json_free(types_json_t *ptr);
void types_cbor_free(types_cbor_t *ptr);
void logging_json_free(logging_json_t *ptr);
void hermes_string_set(hermes_string_t *ret, const char*s);
void hermes_string_dup(hermes_string_t *ret, const char*s);
void hermes_string_free(hermes_string_t *ret);

#ifdef __cplusplus
}
#endif
#endif
