//! CDDL Grammar adapted from RFC8610 Appendix B
//! https://www.rfc-editor.org/rfc/rfc8610#appendix-B

// cspell: words assignt groupname grpent genericparm assigng optcom
// cspell: words genericarg rangeop ctlop grpchoice memberkey bareword hexfloat intfloat
// cspell: words SCHAR BCHAR PCHAR SESC FFFD Characterset Visiable

cddl = ${
    SOI
    ~ S ~ (rule ~ S)+
    ~ EOI
}

// -----------------------------------------------------------------------------
// Rules
rule = ${
    (typename ~ genericparm? ~ S ~ assignt ~ S ~ type)
    | (groupname ~ genericparm? ~ S ~ assigng ~ S ~ grpent)
}

typename = { id }
groupname = { id }

assignt = { "=" | "/=" }
assigng = { "=" | "//=" }

genericparm = ${ "<" ~ S ~ id ~ S ~ ("," ~ S ~ id ~ S)* ~ ">" }
genericarg = ${ "<" ~ S ~ type1 ~ S ~ ("," ~ S ~ type1 ~ S)* ~ ">" }

// -----------------------------------------------------------------------------
// Type Declaration
type = ${ type1 ~ (S ~ "/" ~ S ~ type1)* }

type1 = ${ type2 ~ (S ~ (rangeop | ctlop) ~ S ~ type2)? }

type2 = ${
    value
    | typename ~ genericarg?
    | ("(" ~ S ~ type ~ S ~ ")")
    | ("{" ~ S ~ group ~ S ~ "}")
    | ("[" ~ S ~ group ~ S ~ "]")
    | ("~" ~ S ~ typename ~ genericarg?)
    | ("&" ~ S ~ "(" ~ S ~ group ~ S ~ ")")
    | ("&" ~ S ~ groupname ~ genericarg?)
    | ("#" ~ "6" ~ ("." ~ uint)? ~ "(" ~ S ~ type ~ S ~ ")")
    | ("#" ~ ASCII_DIGIT ~ ("." ~ uint)?)
    | "#"
}

rangeop = { "..." | ".." }
ctlop = ${ "." ~ id }

// -----------------------------------------------------------------------------
// Group Elements
group = ${ grpchoice ~ (S ~ "//" ~ S ~ grpchoice)* }

grpchoice = ${ (grpent ~ optcom)* }

grpent = ${
    ((occur ~ S)? ~ (memberkey ~ S)? ~ type)
    | ((occur ~ S)? ~ groupname ~ genericarg?)
    | ((occur ~ S)? ~ "(" ~ S ~ group ~ S ~ ")")
}

memberkey = ${
    (type1 ~ S ~ ("^" ~ S)? ~ "=>")
    | ((value | bareword) ~ S ~ ":")
}

bareword = { id }

/// Optional Comma - Note eligible for producing pairs as this might be useful for linting
optcom = { S ~ ("," ~ S)? }

occur = {
    (uint? ~ "*" ~ uint?)
    | "+"
    | "?"
}

// -----------------------------------------------------------------------------
// Literal Values

/// All Literal Values
value = { number | text | bytes }

/// Literal Numbers - A float if it has fraction or exponent; int otherwise
number = { hexfloat | intfloat }

/// Hex floats of the form -0x123.abc0p+12
hexfloat = ${ "-"? ~ "0x" ~ ASCII_HEX_DIGIT+ ~ ("." ~ ASCII_HEX_DIGIT+)? ~ "p" ~ exponent }

/// Ints or Int floats
intfloat = ${ int ~ ("." ~ fraction)? ~ ("e" ~ exponent)? }

/// Fractional part of a number
fraction = ${ ASCII_DIGIT+ }

/// Exponent for a number
exponent = ${ ("+" | "-") ~ ASCII_DIGIT+ }

/// All integers, singed and unsigned
int = ${ "-"? ~ uint }


/// Unsigned Integers
uint = ${
    (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    | ("0x" ~ ASCII_HEX_DIGIT+)
    | ("0b" ~ ASCII_BIN_DIGIT+)
    | "0"
}

/// Literal Text
text = ${ "\"" ~ SCHAR* ~ "\"" }

/// Literal Bytes.
bytes = ${ bytes_hex | bytes_b64 | bytes_text }
bytes_hex = ${ "h" ~ "'" ~ HEX_PAIR* ~ "'" }
bytes_b64 = ${ "b64" ~ "'" ~ URL_BASE64 ~ "'" }
bytes_text = ${ "'" ~ BCHAR* ~ "'" }

// -----------------------------------------------------------------------------
// Simple multiple character sequences

/// identifier, called the `name` in the CDDL spec.
id = ${ group_socket | type_socket | name }
/// Special form of a name that represents a Group Socket.
group_socket = ${ "$$" ~ ( ( "-" | "." )* ~ NAME_END )* }
/// Special form of a name that represents a Type Socket.
type_socket = ${ "$" ~ ( ( "-" | "." )* ~ NAME_END )* }
/// General form of a name.
name = ${ NAME_START ~ ( ( "-" | "." )* ~ NAME_END )* }

/// A pair of hex digits. (Must always have even numbers of hex digits.)
HEX_PAIR = _{ S ~ ASCII_HEX_DIGIT ~ S ~ ASCII_HEX_DIGIT ~ S }

/// Whitespace is allowed and is ignored.
/// This token will keep the whitespace, so it will need to handled when converted to binary.
URL_BASE64 = _{ S ~ ( URL_BASE64_ALPHA ~ S)* ~ URL_BASE64_PAD? }


// -----------------------------------------------------------------------------
// Characters, Whitespace and Comments

S = _{ (COMMENT | WHITESPACE)* }
WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = { ";" ~ (PCHAR | "\t")* ~ NEWLINE }

URL_BASE64_ALPHA = _{ ASCII_ALPHA | ASCII_DIGIT |  "-" | "_"  }
// Optional Padding that goes at the end of Base64.
URL_BASE64_PAD = _{ "~" }

// Identifier Name Character sets.

/// A name can start with an alphabetic character (including "@", "_", "$")
/// The body of the name can consist of any of the characters from the set
///   {"A" to "Z", "a" to "z", "0" to "9", "_", "-", "@", ".", "$"}
// NAME_BODY = _{ NAME_END | "-" | "." }  -- Unused Rule
NAME_START = _{ ASCII_ALPHA | "@" | "_" | "$" }
/// A name can end with an alphabetic character (including "@", "_", "$") or a digit.
NAME_END = _{ NAME_START | ASCII_DIGIT }

/// All Visible characters.
PCHAR = _{ ASCII_VISIBLE | UNICODE_CHAR }

/// The set of characters valid for a text string.
SCHAR = _{ SCHAR_ASCII_VISIBLE | UNICODE_CHAR | SESC }

/// The set of characters valid for a byte string.
BCHAR = _{ BCHAR_ASCII_VISIBLE | UNICODE_CHAR | SESC | NEWLINE }

/// Escaping code to allow invalid characters to be used in text or byte strings.
SESC = ${ "\\" ~ (ASCII_VISIBLE | UNICODE_CHAR) }

/// All Visible Ascii characters.
ASCII_VISIBLE = _{ ' '..'~' }

/// Ascii subset valid for text strings.
SCHAR_ASCII_VISIBLE = _{ ' '..'!' | '#'..'[' | ']'..'~' }

/// Ascii subset valid for byte text strings.
BCHAR_ASCII_VISIBLE = _{ ' '..'&' | '('..'[' | ']'..'~' }

/// Valid non ascii unicode Characters
UNICODE_CHAR = _{ '\u{80}'..'\u{10FFFD}' }