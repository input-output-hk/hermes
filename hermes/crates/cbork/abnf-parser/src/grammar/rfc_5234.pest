//! CDDL Grammar adapted from RFC8610 Appendix B
//! https://www.rfc-editor.org/rfc/rfc8610#appendix-B

// cspell: words assignt groupname grpent genericparm assigng optcom
// cspell: words genericarg rangeop ctlop grpchoice memberkey bareword hexfloat intfloat
// cspell: words SCHAR BCHAR PCHAR SESC FFFD Characterset Visiable

abnf = ${
    SOI
    ~ S ~ (rule ~ S)+
    ~ EOI
}

// -----------------------------------------------------------------------------
// Rules
rule = ${ rulename ~ defined_as ~ elements ~ S }

rulename = ${ ASCII_ALPHA ~ (ASCII_ALPHA | ASCII_DIGIT | "-" )* }

// basic rules definition and incremental alternatives
defined_as = ${ S ~ ("=" | "=/")* ~ S }

elements = ${ alternation ~ S }

alternation = ${ concatenation ~ (S ~ "/" ~ S ~ concatenation)* }

concatenation = ${ repetition ~ (S ~ repetition)* } // FIXME: a must +1 whtiespace

repetition = ${ repeat? ~ element }

repeat = ${ ASCII_DIGIT+ | (ASCII_DIGIT* ~ "*" ~ ASCII_DIGIT*) }

element = ${ rulename | group | option | char_val | num_val | prose_val }

group = ${ "(" ~ S ~ alternation ~ S ~ ")" }

option = ${ "[" ~ S ~ alternation ~ S ~ "]" }

// Values
char_val = ${ "\"" ~ ('\u{20}'..'\u{21}' | '\u{23}'..'\u{7E}')* ~ "\"" }

num_val = ${ "%" ~ (bin_val | dec_val | hex_val) }

bin_val = ${ "b" ~ ASCII_BIN_DIGIT+ ~ (("." ~ ASCII_BIN_DIGIT+)+ | ("-" ~ ASCII_BIN_DIGIT+))? }

dec_val = ${ "d" ~ ASCII_DIGIT+ ~ (("." ~ ASCII_DIGIT+)+ | ("-" ~ ASCII_DIGIT+))? }

hex_val = ${ "x" ~ ASCII_HEX_DIGIT+ ~ (("." ~ ASCII_HEX_DIGIT+)+ | ("-" ~ ASCII_HEX_DIGIT+))? }

prose_val = ${ "<" ~ ('\u{20}'..'\u{3D}' | '\u{3F}'..'\u{7E}')* ~ ">" }

// -----------------------------------------------------------------------------
// Characters, Whitespace and Comments

c_wsp = _{ WHITESPACE | (c_nl ~ WHITESPACE) }
c_nl = _{ COMMENT | NEWLINE }

S = _{ (COMMENT | WHITESPACE)* }
WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = { ";" ~ (PCHAR | "\t")* ~ NEWLINE }

// Identifier Name Character sets.

/// All Visible characters.
PCHAR = _{ ASCII_VISIBLE | UNICODE_CHAR }

/// The set of characters valid for a text string.
SCHAR = _{ SCHAR_ASCII_VISIBLE | UNICODE_CHAR | SESC }

/// The set of characters valid for a byte string.
BCHAR = _{ BCHAR_ASCII_VISIBLE | UNICODE_CHAR | SESC | NEWLINE }

/// Escaping code to allow invalid characters to be used in text or byte strings.
SESC = ${ "\\" ~ (ASCII_VISIBLE | UNICODE_CHAR) }

/// All Visible Ascii characters.
ASCII_VISIBLE = _{ ' '..'~' }

/// Ascii subset valid for text strings.
SCHAR_ASCII_VISIBLE = _{ ' '..'!' | '#'..'[' | ']'..'~' }

/// Ascii subset valid for byte text strings.
BCHAR_ASCII_VISIBLE = _{ ' '..'&' | '('..'[' | ']'..'~' }

/// Valid non ascii unicode Characters
UNICODE_CHAR = _{ '\u{80}'..'\u{10FFFD}' }