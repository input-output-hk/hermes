//! Hermes WIT exports for event handlers.
//!
//! Unlike the functions of [`super::Hermes`] (generated by
//! [`wasmtime::component::bindgen`]), these aren't checked for presence in WASM until
//! use.

use wasmtime::{
    component::{self, ComponentNamedList, TypedFunc},
    AsContextMut,
};

use crate::runtime_context::HermesRuntimeContext;

/// WASM function lookup failure.
#[derive(Debug, thiserror::Error)]
pub(crate) enum Error {
    /// A WIT interface and/or function is missing from WASM exports.
    #[error("event handler is not exported")]
    NotExported,
    /// An export is found but its signature doesn't match the one defined in WIT.
    #[error("invalid event handler signature")]
    InvalidSignature,
}

/// Lookup a function in WASM by its path and signature.
pub(crate) fn get_typed_func<Params, Return>(
    instance: &component::Instance,
    store: &mut wasmtime::Store<HermesRuntimeContext>,
    wit_interface_name: &str,
    wit_func_name: &str,
) -> Result<TypedFunc<Params, Return>, Error>
where
    Params: ComponentNamedList + component::Lower,
    Return: ComponentNamedList + component::Lift,
{
    let Some(untyped) = instance
        .get_export_index(store.as_context_mut(), None, wit_interface_name)
        .and_then(|interface_idx| {
            instance.get_export_index(store.as_context_mut(), Some(&interface_idx), wit_func_name)
        })
        .and_then(|func_idx| instance.get_func(store.as_context_mut(), func_idx))
    else {
        return Err(Error::NotExported);
    };
    untyped.typed(store).map_err(|_| Error::InvalidSignature)
}

/// Defines an extension trait for [`wasmtime::component::Instance`] and immediately
/// implements it. Uses [`get_typed_func`] internally.
macro_rules! define {
    ($(#[$attr:meta])* $vis:vis trait $ext_trait:ident {$(
        #[wit($wit_interface:literal, $wit_func:literal)]
        fn $rust_func:ident$(<$l:lifetime>)?($($param_name:ident: $param:ty),* $(,)?) $(-> $return:ty)?;
    )*}) => {::paste::paste! {
        $vis trait $ext_trait {$(
            #[doc = concat!("Looks up \"", $wit_func , "\" from \"", $wit_interface, "\".\n")]
            fn [<lookup_ $rust_func>]$(<$l>)?(
                &self,
                store: &mut ::wasmtime::Store<$crate::runtime_context::HermesRuntimeContext>
            ) -> Result<
                ::wasmtime::component::TypedFunc<($($param,)*), ($($return,)?)>,
                $crate::runtime_extensions::bindings::unchecked_exports::Error
            >;

            #[doc = concat!("Looks up and calls \"", $wit_func , "\" from \"", $wit_interface, "\".\n")]
            #[doc = concat!("This wraps around [`Self::", stringify!([<lookup_ $rust_func>]), "`].\n")]
            #[allow(unused_parens, dead_code, reason = "needed for codegen in no-return case")]
            fn $rust_func$(<$l>)?(
                &self,
                store: &mut ::wasmtime::Store<$crate::runtime_context::HermesRuntimeContext>,
                $($param_name: $param,)*
            ) -> ::anyhow::Result<($($return)?)> {
                use anyhow::Context as _;
                self.[<lookup_ $rust_func>](store)
                    .context(concat!("when looking up the export (",$wit_func, " from ", $wit_interface, ')'))?
                    .call(store, ($($param_name,)*))
                    .context(concat!("when calling the export (",$wit_func, " from ", $wit_interface, ')'))
                    $(.map(|(ret,): ($return,)| ret))?
            }
        )*}

        impl $ext_trait for ::wasmtime::component::Instance {$(
            fn [<lookup_ $rust_func>]$(<$l>)?(
                &self,
                store: &mut ::wasmtime::Store<$crate::runtime_context::HermesRuntimeContext>
            ) -> Result<
                ::wasmtime::component::TypedFunc<($($param,)*), ($($return,)?)>,
                $crate::runtime_extensions::bindings::unchecked_exports::Error
            >
            {
                $crate::runtime_extensions::bindings::unchecked_exports::get_typed_func(self, store, $wit_interface, $wit_func)
            }
        )*}
    }};
}

pub(crate) use define;
