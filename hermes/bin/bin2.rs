mod binary {
    //! Runtime modules - extensions - Hermes - Binary extensions
    //!
    //! *Note*
    //! Inspect the generated code with:
    //! ```
    //! cargo expand --bin hermes runtime::extensions::hermes::binary
    //! ```
    use wasmtime::component::bindgen;
    pub struct All {}
    const _: () = {
        use wasmtime::component::__internal::anyhow;
        impl All {
            pub fn add_to_linker<T, U>(
                linker: &mut wasmtime::component::Linker<T>,
                get: impl Fn(&mut T) -> &mut U + Send + Sync + Copy + 'static,
            ) -> wasmtime::Result<()>
            where
                U: hermes::binary::api::Host,
            {
                hermes::binary::api::add_to_linker(linker, get)?;
                Ok(())
            }
            /// Instantiates the provided `module` using the specified
            /// parameters, wrapping up the result in a structure that
            /// translates between wasm and the host.
            pub fn instantiate<T>(
                mut store: impl wasmtime::AsContextMut<Data = T>,
                component: &wasmtime::component::Component,
                linker: &wasmtime::component::Linker<T>,
            ) -> wasmtime::Result<(Self, wasmtime::component::Instance)> {
                let instance = linker.instantiate(&mut store, component)?;
                Ok((Self::new(store, &instance)?, instance))
            }
            /// Instantiates a pre-instantiated module using the specified
            /// parameters, wrapping up the result in a structure that
            /// translates between wasm and the host.
            pub fn instantiate_pre<T>(
                mut store: impl wasmtime::AsContextMut<Data = T>,
                instance_pre: &wasmtime::component::InstancePre<T>,
            ) -> wasmtime::Result<(Self, wasmtime::component::Instance)> {
                let instance = instance_pre.instantiate(&mut store)?;
                Ok((Self::new(store, &instance)?, instance))
            }
            /// Low-level creation wrapper for wrapping up the exports
            /// of the `instance` provided in this structure of wasm
            /// exports.
            ///
            /// This function will extract exports from the `instance`
            /// defined within `store` and wrap them all up in the
            /// returned structure which can be used to interact with
            /// the wasm module.
            pub fn new(
                mut store: impl wasmtime::AsContextMut,
                instance: &wasmtime::component::Instance,
            ) -> wasmtime::Result<Self> {
                let mut store = store.as_context_mut();
                let mut exports = instance.exports(&mut store);
                let mut __exports = exports.root();
                Ok(All {})
            }
        }
    };
    pub mod hermes {
        pub mod binary {
            #[allow(clippy::all)]
            pub mod api {
                #[allow(unused_imports)]
                use wasmtime::component::__internal::anyhow;
                pub trait Host {}
                pub fn add_to_linker<T, U>(
                    linker: &mut wasmtime::component::Linker<T>,
                    get: impl Fn(&mut T) -> &mut U + Send + Sync + Copy + 'static,
                ) -> wasmtime::Result<()>
                where
                    U: Host,
                {
                    let mut inst = linker.instance("hermes:binary/api")?;
                    Ok(())
                }
            }
        }
    }
    const _: &str = "package hermes:binary;\n\nworld all {\n    import api;\n}\n";
    const _: &str = "/// # Binary Data API\n///\n/// Binary Data types and functions.\n///\n/// ## Permissions\n///\n/// This API is permissionless.\n\n// cspell: words\n\n/// Binary API Interface - Imports ONLY\ninterface api {\n    // Binary String (bstr) is a list of bytes.\n    //    This type is used to indicate the data is an arbitrary array of bytes.\n    type bstr = list<u8>;\n\n    // 128 bit value\n    type b128 = tuple<u64, u64>;\n\n    // 256 bit value\n    type b256 = tuple<u64, u64, u64, u64>;\n\n    // 512 bit value\n    type b512 = tuple<u64, u64, u64, u64, u64, u64, u64, u64>;\n\n}\n\n\n/// World just for the Hermes \'cron\' API and Event.\nworld binary-api {\n    import api;\n}\n  ";
    const _: &str = "package hermes:cbor;\n\nworld all {\n    import api;\n}\n";
    const _: &str = "/// # CBOR API\n///\n/// CBOR Data types and functions.\n///\n/// ## Permissions\n///\n/// This API is permissionless.\n\n// cspell: words\n\n/// CBOR API Interface - Imports ONLY\ninterface api {\n    /// Get the `bstr` type from the `hermes:binary` module.\n    use hermes:binary/api.{bstr};\n\n    /// CBOR is a binary cbor data type.\n    ///    This type is used to indicate the binary array MUST be CBOR data.\n    type cbor = bstr;\n}\n\n\n/// World just for the Hermes \'cron\' API and Event.\nworld cbor-api {\n    import api;\n}\n  ";
    const _: &str = "/// # Cardano API\n///\n/// Events triggered by subscribing to blockchain updates.\n///\n/// ## Event Scheduling\n///\n/// **Guarantee**: Block events will occur and be fully processed, \n/// before any transaction events from that block are sent.\n///\n/// **Guarantee**: Transaction events will be sent and could arrive in any order,\n/// BUT only after all event processing of the block they come from is complete.\n/// Further block or rollback events will not occur until all transaction events\n/// from a block are fully processed.\n/// \n/// **Guarantee**: Rollback events will be fully processed before the next block \n/// event will be sent.  The block event sent immediately after a rollback event \n/// will be the target of the rollback.  This means that rollback processing does \n/// not need to reset or re-subscribe the blockchain follower.\n///\n/// **Warning**: Events from different blockchains are not synchronized between \n/// each other.\n\n/// Cardano API Interface - Export ONLY\ninterface event-on-block {\n    use api.{cardano-blockchain-id, cardano-block};\n\n    flags block-src {\n        tip,\n        node,\n        mithril\n    }\n\n    /// Triggered when a cardano block event fires.\n    ///\n    /// The module must export this interface to use it.\n    ///\n    /// ## Parameters\n    ///\n    /// - `blockchain` : The blockchain id the block originated from.\n    /// - `block` : This raw CBOR block data.\n    /// - `source` : Source information about where the block came from, and if we are at tip or not.\n    ///\n    /// Returns:\n    ///     Nothing.\n    /// \n    on-cardano-block: func(blockchain: cardano-blockchain-id, block: cardano-block, source:block-src);\n}\n\n/// Cardano API Interface - Export ONLY\ninterface event-on-txn {\n    use api.{cardano-blockchain-id, cardano-txn};\n\n    /// Triggered when a cardano transaction event fires.\n    ///\n    /// The module must export this interface to use it.\n    ///\n    /// ## Parameters\n    ///\n    /// - `blockchain` : The blockchain id the block originated from.\n    /// - `slot`       : The slot the transaction is in.\n    /// - `txn-index`  : The offset in the block this transaction is at.\n    /// - `txn`        : The raw transaction data itself.\n    ///\n    /// Returns:\n    ///     Nothing.\n    /// \n    on-cardano-txn: func(blockchain: cardano-blockchain-id, slot:u64, txn-index: u32, txn: cardano-txn);\n}\n\n/// Cardano API Interface - Export ONLY\ninterface event-on-rollback {\n    use api.{cardano-blockchain-id};\n\n    /// Triggered when a cardano rollback event fires.\n    ///\n    /// The module must export this interface to use it.\n    ///\n    /// ## Parameters\n    ///\n    /// - `blockchain` : The blockchain id the rollback originated from.\n    /// - `slot`       : The slot the rollback is targeting. (The next block event will be from this slot.)\n    ///\n    /// Returns:\n    ///     Nothing.\n    /// \n    on-cardano-rollback: func(blockchain: cardano-blockchain-id, slot:u64);\n}\n\n\nworld cardano-events {\n    export event-on-block;\n    export event-on-txn;\n    export event-on-rollback;\n}";
    const _: &str = "package hermes:cardano;\n\n\nworld all {\n    import api;\n\n    export event-on-block;\n    export event-on-txn;\n    export event-on-rollback;\n}\n";
    const _: &str = "/// # Cardano Blockchain API\n///\n/// Cardano Blockchain API functionality exposed to the Hermes WASM Modules.\n///\n/// ## Permissions\n///\n/// This API is ALWAYS available.\n\n/// Cardano API Interface\ninterface api {\n    use hermes:cbor/api.{cbor};\n\n    /// Cardano Blocks are CBOR Data\n    type cardano-block = cbor;\n\n    /// Cardano Transactions are CBOR Data\n    type cardano-txn = cbor;\n\n    /// The ID of the blockchain to interact with.\n    enum cardano-blockchain-id {\n        mainnet, // Cardano Mainnet\n        preprod, // Cardano Preprod Network\n        preview, // Cardano Preview Network\n        local-test-blockchain // A local isolated test blockchain.\n    }\n\n    /// The Slot number to interact with\n    variant slot {\n        genesis,      // The very start of the blockchain.\n        slot-no(u64), // A particular slot number.\n        tip,          // The TIP of the blockchain.\n        continue,     // From wherever its currently pointing.\n    }\n\n    /// Errors that can happen fetching/subscribing to blocks\n    enum fetch-error {\n        blockchain-not-available, // The blockchain requested is not available.\n        invalid-slot,   // The slot requested is not a valid slot for the blockchain.\n    }\n\n    /// Errors that can occur when posting transactions.\n    enum txn-error {\n        blockchain-not-available, // The blockchain requested is not available.\n        malformed-transaction, // The transaction is not well formed, and can not be posted.\n        post-txn-not-allowed // Posting transactions is not allowed, nothing sent to blockchain.\n    }\n\n    /// Options used to unsubscribe from the blockchain data flow.\n    flags unsubscribe-options {\n        block,  // Stop receiving block data\n        transaction, // Stop receiving txn data\n        rollback, // Stop receiving rollback data\n        stop // stop the blockchain fetching process altogether.\n    }\n\n\n    /// Subscribe to the Blockchain block data.\n    /// \n    /// **Parameters**\n    ///\n    /// - `net` : The blockchain network to fetch block from, and subscribe to.\n    /// - `whence`: Where to start fetching blocks from.\n    /// \n    /// **Returns**\n    /// \n    /// - `ok(u64)` : The slot we are synching from now.\n    /// - `error(fetch-error)` : If an error occured.\n    /// \n    /// **Notes**\n    /// \n    /// If the blockchain is not yet syncing, it will start, from the requested slot.\n    /// If the blockchain is not yet syncing, and `whence` == `continue` then the blockchain will\n    /// not be synced from, the calling module will only be subscribed for block events.\n    /// \n    /// If the blockchain is already syncing, the sync will stop and restart, unless `whence` == `continue`.\n    /// When `whence` == `continue` the blockchain will keep syncing from where it is at, and this module\n    /// will be subscribed to block updates.\n    /// \n    /// `whence` == `stop` will prevent the blockchain syncing, and the caller will be unsubscribed.\n    /// \n    /// \n    subscribe-blocks: func (net: cardano-blockchain-id, whence: slot ) -> result<u64, fetch-error>;\n\n    /// Unsubscribe from the blockchain events listed.\n    /// \n    /// **Parameters**\n    ///\n    /// - `events` : The events to unsubscribe from (and optionally stop the blockchain follower).\n    /// \n    /// **Notes**\n    /// \n    /// This only unsubscribes from the events.\n    /// The option `stop` MUST be set to actually stop fetching data from the blockchain once started.\n    /// \n    /// `stop` can be set without unsubscribing, and this will interrupt the flow of blockchain data.\n    /// After `stop`,  `subscribe-blocks(?, continue)` would cause blockchain sync to continue from \n    /// the last block received.  This would result in the last block being sent as an event twice,\n    /// once before the `stop` and once after the `continue`.\n    unsubscribe: func(events: unsubscribe-options);\n\n    /// Subscribe to transaction data events, does not alter the blockchain sync in anyway.\n    /// \n    /// **Parameters**\n    ///\n    /// - `net` : The blockchain network to subscribe to txn events from.\n    /// \n    subscribe-txn: func (net: cardano-blockchain-id);\n\n    /// Subscribe to blockchain rollback events, does not alter the blockchain sync in anyway.\n    /// \n    /// **Parameters**\n    ///\n    /// - `net` : The blockchain network to subscribe to txn events from.\n    /// \n    /// **Notes**\n    /// \n    /// After a rollback event, the blockchain sync will AUTOMATICALLY start sending block\n    /// data from the rollback point.  No action is required to actually follow the rollback, unless the\n    /// default behavior is not desired.\n    subscribe-rollback: func (net: cardano-blockchain-id);\n\n    /// Fetch a block from the requested blockchain at the requested slot.\n    /// \n    /// **Parameters**\n    ///\n    /// - `net`    : The blockchain network to get a block from.\n    /// - `whence` : Which block to get.\n    /// \n    /// **Returns**\n    /// \n    /// - `cardano-block` : The block requested.\n    /// - `fetch-error` : An error if the block can not be fetched.\n    /// \n    /// **Notes**\n    /// \n    /// Fetching a block does not require the blockchain to be subscribed, or for blocks to be\n    /// being followed and generating events.\n    /// It also will not alter the automatic fetching of blocks in any way, and happens in parallel\n    /// to automated block fetch.\n    /// \n    fetch-block: func (net: cardano-blockchain-id, whence: slot) -> result<cardano-block, fetch-error>;\n\n    /// Get transactions from a block.\n    /// \n    /// This can be used to easily extract all transactions from a complete block.\n    /// \n    /// **Parameters**\n    ///\n    /// - `block` : The blockchain data to extract transactions from.\n    /// \n    /// **Returns**\n    /// \n    /// - a list of all transactions in the block, in the order they appear in the block.\n    /// \n    /// **Notes**\n    /// \n    /// This function exists to support `fetch-block`.\n    /// Transactions from subscribed block events, should be processed as transaction events.\n    /// \n    get-txns: func (block: cardano-block) -> list<cardano-txn>;\n\n    /// Post a transactions to the blockchain.\n    /// \n    /// This can be used to post a pre-formed transaction to the required blockchain.\n    /// \n    /// **Parameters**\n    ///\n    /// - `net` : The blockchain to post the transaction to.\n    /// - `txn` : The transaction data, ready to submit.\n    /// \n    /// **Returns**\n    /// \n    /// - An error if the transaction can not be posted.\n    /// \n    /// **Notes**\n    /// \n    /// This is proposed functionality, and is not yet active.\n    /// All calls to this function will return `post-txn-not-allowed` error.\n    /// \n    post-txn: func (net: cardano-blockchain-id, txn: cardano-txn) -> result<_, txn-error>;\n}\n\n/// World just for the Hermes \'json\' API.\nworld cardano-api {\n    import api;\n}\n";
    const _: &str = "package wasi:clocks@0.2.0;\n\nworld imports {\n    import monotonic-clock;\n    import wall-clock;\n}\n";
    const _: &str = "package wasi:clocks@0.2.0;\n/// WASI Wall Clock is a clock API intended to let users query the current\n/// time. The name \"wall\" makes an analogy to a \"clock on the wall\", which\n/// is not necessarily monotonic as it may be reset.\n///\n/// It is intended to be portable at least between Unix-family platforms and\n/// Windows.\n///\n/// A wall clock is a clock which measures the date and time according to\n/// some external reference.\n///\n/// External references may be reset, so this clock is not necessarily\n/// monotonic, making it unsuitable for measuring elapsed time.\n///\n/// It is intended for reporting the current date and time for humans.\ninterface wall-clock {\n    /// A time and date in seconds plus nanoseconds.\n    record datetime {\n        seconds: u64,\n        nanoseconds: u32,\n    }\n\n    /// Read the current value of the clock.\n    ///\n    /// This clock is not monotonic, therefore calling this function repeatedly\n    /// will not necessarily produce a sequence of non-decreasing values.\n    ///\n    /// The returned timestamps represent the number of seconds since\n    /// 1970-01-01T00:00:00Z, also known as [POSIX\'s Seconds Since the Epoch],\n    /// also known as [Unix Time].\n    ///\n    /// The nanoseconds field of the output is always less than 1000000000.\n    ///\n    /// [POSIX\'s Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16\n    /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time\n    now: func() -> datetime;\n\n    /// Query the resolution of the clock.\n    ///\n    /// The nanoseconds field of the output is always less than 1000000000.\n    resolution: func() -> datetime;\n}\n";
    const _: &str = "package wasi:clocks@0.2.0;\n/// WASI Monotonic Clock is a clock API intended to let users measure elapsed\n/// time.\n///\n/// It is intended to be portable at least between Unix-family platforms and\n/// Windows.\n///\n/// A monotonic clock is a clock which has an unspecified initial value, and\n/// successive reads of the clock will produce non-decreasing values.\n///\n/// It is intended for measuring elapsed time.\ninterface monotonic-clock {\n    // Hermes does not support `poll`\n    //use wasi:io/poll@0.2.0.{pollable};\n\n    /// An instant in time, in nanoseconds. An instant is relative to an\n    /// unspecified initial value, and can only be compared to instances from\n    /// the same monotonic-clock.\n    type instant = u64;\n\n    /// A duration of time, in nanoseconds.\n    type duration = u64;\n\n    /// Read the current value of the clock.\n    ///\n    /// The clock is monotonic, therefore calling this function repeatedly will\n    /// produce a sequence of non-decreasing values.\n    now: func() -> instant;\n\n    /// Query the resolution of the clock. Returns the duration of time\n    /// corresponding to a clock tick.\n    resolution: func() -> duration;\n\n    /*\n    /// Create a `pollable` which will resolve once the specified instant\n    /// occured.\n    subscribe-instant: func(\n        when: instant,\n    ) -> pollable;\n    \n    /// Create a `pollable` which will resolve once the given duration has\n    /// elapsed, starting at the time at which this function was called.\n    /// occured.\n    subscribe-duration: func(\n        when: duration,\n    ) -> pollable;\n    */\n}\n";
    const _: &str = "/// # Cron API\n///\n/// Event triggered on CRON schedule.\n///\n/// ## Event Scheduling\n///\n/// **Guarantee**: Cron events with the same tag will be delivered and executed in the order\n/// they occur.\n///\n/// **Guarantee**: Later cron events with the same tag will not begin processing until the\n/// previous cron event with that tag has been fully processed by all processors of the event.\n///\n/// **Warning**: Events with different tags can arrive out of sequence with respect to each other.\n/// Sequence is only guaranteed by the tag.\n\n/// CRON API Interface - Export ONLY\ninterface event {\n    use api.{cron-event-tag, cron-tagged};\n\n    /// Triggered when a cron event fires.\n    ///\n    /// This event is only ever generated for the application that added\n    /// the cron job.\n    ///\n    /// The module must export this interface to use it.\n    ///\n    /// ## Parameters\n    ///\n    /// - `event` : The tagged cron event that was triggered.\n    /// - `last` : This cron event will not retrigger.\n    ///\n    /// Returns:\n    /// - `true`  - retrigger. (Ignored if the cron event is `final`).\n    /// - `false` - stop the cron.\n    on-cron: func(event: cron-tagged, last: bool) -> bool;\n}\n\nworld cron-event {\n    export event;\n}";
    const _: &str = "/// # Cron API\n///\n/// Allow time based scheduling of events.\n///\n/// ## Permissions\n///\n/// This API is permissionless.\n\n// cspell: words crontabs mkcron retrigger retriggering\n\n/// CRON API Interface - Imports ONLY\ninterface api {\n\n    /// Get the `instant` type from the `wasi:clocks` module.\n    use wasi:clocks/monotonic-clock@0.2.0.{instant};\n\n    /// A Tag used to mark a delivered cron event.\n    type cron-event-tag = string;\n\n    /// A cron schedule in crontab format.\n    type cron-sched = string;\n\n    /// A tagged crontab entry\n    /// It is valid for multiple crontab entries at the same time to have different tags.\n    /// It is valid for crontab entries at different times to have the same tag.\n    /// BUT there can only ever be 1 crontab entry at a specified time with a specified tag.\n    /// ie, `when` + `tag` is uniquely identifying of every crontab entry.\n    /// See: [crontab.5 man page](https://www.man7.org/linux/man-pages/man5/crontab.5.html) for details on cron schedule format.\n    record cron-tagged {\n        /// The crontab entry in standard cron format.\n        /// The Time is ALWAYS relative to UTC and does not account for local time.\n        /// If Localtime adjustment is required it must be handled by the module.\n        when: cron-sched,\n\n        /// The tag associated with the crontab entry.\n        tag: cron-event-tag\n    }\n\n    /// A discreet time entry used to help convert numeric times into crontab entries.\n    variant cron-component {\n        // Maps to `*` in a cron schedule (ie, match all)\n        all,\n        // Match an absolute time/date\n        at(u8),\n        // Match an inclusive list of time/date values.\n        range(tuple<u8,u8>),\n    }\n\n    /// A list of cron time components\n    type cron-components = list<cron-component>;\n\n    /// The actual individual cron-time entry\n    enum cron-time {\n        cron-component,\n        cron-components\n    }\n\n    /// # Schedule Recurrent CRON event\n    ///\n    /// Cron events will be delivered to the `on-cron` event handler.\n    ///\n    /// ## Parameters\n    ///\n    /// - `entry`: The crontab entry to add.\n    ///     - `when`: When the event triggers.  Standard crontab format.\n    ///     - `tag`: A tag which will accompany the triggered event.\n    /// - `retrigger`:\n    ///     - `true`: The event will re-trigger every time the crontab entry matches until cancelled.\n    ///     - `false`: The event will automatically cancel after it is generated once.\n    ///\n    /// ## Returns\n    ///\n    /// - `true`: Crontab added successfully.  (Or the crontab event already exists)\n    /// - `false`: Crontab failed to be added.\n    ///\n    /// ## Note:\n    ///\n    /// If the crontab entry already exists, the retrigger flag can be changed by calling\n    /// this function.  This could be useful where a retriggering crontab event is desired\n    /// to be stopped, but ONLY after it has triggered once more.\n    ///\n    add: func(entry: cron-tagged, retrigger: bool) -> bool;\n\n    /// # Schedule A Single cron event after a fixed delay.\n    ///\n    /// Allows for easy timed wait events to be delivered without\n    /// requiring datetime calculations or formatting cron entries.\n    ///\n    /// ## Parameters\n    ///\n    /// - `duration`: How many nanoseconds to delay.  The delay will be AT LEAST this long.\n    /// - `tag`: A tag which will accompany the triggered event.\n    ///\n    /// ## Returns\n    ///\n    /// - `true`: Crontab added successfully.\n    /// - `false`: Crontab failed to be added.\n    ///\n    /// ## Note:\n    ///\n    /// This is a convenience function which will automatically calculate the crontab\n    /// entry needed to trigger the event after the requested `duration`.\n    /// It is added as a non-retriggering event.\n    /// Listing the crontabs after this call will list the delay in addition to all other\n    /// crontab entries.\n    ///\n    delay: func(duration: instant, tag: cron-event-tag) -> bool;\n\n\n    /// # List currently active cron schedule.\n    ///\n    /// Allows for management of scheduled cron events.\n    ///\n    /// ## Parameters\n    ///\n    /// - `tag`: Optional, the tag to limit the list to.  If `none` then all crons listed.\n    ///\n    /// ## Returns\n    ///\n    /// - A list of tuples containing the scheduled crontabs and their tags, along with the current retrigger flag.\n    ///   The list is sorted from most crontab that will trigger soonest to latest.\n    ///   Crontabs are only listed once, in the case where a crontab may be scheduled\n    ///   may times before a later one.\n    ///     - `0` - `cron-tagged` - The Tagged crontab event.\n    ///     - `1` - `bool` - The state of the retrigger flag.\n    ///\n    ls: func(tag: option<cron-event-tag>) -> list<tuple<cron-tagged, bool>>;\n\n    /// # Remove the requested crontab.\n    ///\n    /// Allows for management of scheduled cron events.\n    ///\n    /// ## Parameters\n    ///\n    /// - `when`: The crontab entry to add.  Standard crontab format.\n    /// - `tag`: A tag which will accompany the triggered event.\n    ///\n    /// ## Returns\n    ///\n    /// - `true`: The requested crontab was deleted and will not trigger.\n    /// - `false`: The requested crontab does not exist.\n    ///\n    rm: func(entry: cron-tagged) -> bool;\n\n    /// # Make a crontab entry from individual time values.\n    ///\n    /// Crates the properly formatted cron entry\n    /// from numeric cron time components.\n    /// Convenience function to make building cron strings simpler when they are\n    /// calculated from data.\n    ///\n    /// ## Parameters\n    ///\n    /// - `dow` - DayOfWeek (0-7, 0 or 7 = Sunday)\n    /// - `month` - Month of the year (1-12, 1 = January)\n    /// - `day` - Day in the month (1-31)\n    /// - `hour` - Hour in the day (0-23)\n    /// - `minute` - Minute in the hour (0-59)\n    ///\n    /// ## Returns\n    ///\n    /// - A matching `cron-sched` ready for use in the cron functions above.\n    ///\n    /// ## Note:\n    /// No checking is done to determine if the requested date is valid.\n    /// If a particular component is out of its allowable range it will be silently\n    /// clamped within the allowable range of each parameter.\n    /// Redundant entries will be removed.\n    ///     - For example specifying a `month` as `3` and `2-4` will\n    ///         remove the individual month and only produce the range.\n    mkcron: func(dow: cron-time, month: cron-time, day: cron-time,\n                 hour: cron-time, minute: cron-time ) -> cron-sched;\n}\n\n/// World just for the Hermes \'cron\' API and Event.\nworld cron-api {\n    import api;\n}\n  ";
    const _: &str = "package hermes:cron;\n\nworld all {\n    import api;\n    export event;\n}\n";
    const _: &str = "package hermes:crypto;\n\nworld all {\n    import api;\n}\n";
    const _: &str = "/// # Crypto API\n///\n/// Crypto API functionality exposed to the Hermes WASM Modules.\n///\n/// ## Permissions\n///\n/// This API is ALWAYS available.\n\n/// Crypto API Interface\ninterface api {\n    use hermes:binary/api.{bstr, b256, b512};\n\n    // ed25519-bip32 Private Key\n    type ed25519-bip32-private-key = b256;\n\n    // ed25519-bip32 Extended Private Key\n    type ed25519-bip32-extended-private-key = b512;\n\n    // ed25519-bip32 Public Key\n    type ed25519-bip32-public-key = b256;\n\n    // ed25519-bip32 Signature\n    type ed25519-bip32-signature = b256;\n\n    resource ed25519-bip32 {\n        /// Create a new ED25519-BIP32 Crypto resource\n        /// \n        /// **Parameters**\n        ///\n        /// - `private_key` : The key to use, if not supplied one is RANDOMLY generated.\n        /// \n        constructor(private-key: option<list<ed25519-bip32-private-key>>);\n\n        /// Get the public key for this private key.\n        public-key: func() -> ed25519-bip32-public-key;\n\n        /// Sign data with the Private key, and return it.\n        /// \n        /// **Parameters**\n        ///\n        /// - `data` : The data to sign.\n        /// \n        sign-data: func(data: bstr) -> ed25519-bip32-signature;\n\n\n        /// Check a signature on a set of data.\n        /// \n        /// **Parameters**\n        ///\n        /// - `data` : The data to check.\n        /// - `sig`  : The signature to check.\n        /// \n        /// **Returns**\n        /// \n        /// - `true` : Signature checked OK.\n        /// - `false` : Signature check failed.\n        ///\n        check-sig: func(data: bstr, sig: ed25519-bip32-signature) -> bool;\n\n        /// Derive a new private key from the current private key.\n        /// \n        /// Note: uses BIP32 HD key derivation.\n        /// \n        derive: func() -> ed25519-bip32;\n\n        /// Create a new RANDOM private key.\n        /// \n        /// Note, this does not need to be used, as the constructor will do this automatically.\n        /// \n        gen-private-key: static func() -> ed25519-bip32-private-key;\n    }\n}\n\n/// World just for the Hermes \'json\' API.\nworld crypto-api {\n    import api;\n}\n";
    const _: &str = "/// # Data Hash API\n///\n/// Hashing Data types and functions.\n///\n/// ## Permissions\n///\n/// This API is permissionless.\n\n/// Hashing API Interface - Imports ONLY\ninterface api {\n    /// Get the `bstr` type from the `hermes:binary` module.\n    use hermes:binary/api.{bstr};\n\n    //  Errors that can occur during hashing.\n    enum errno {\n        key-too-big,  // The ley is larger than supported by the hash function.\n        hash-too-big  // The hash size requested is larger than supported by the hash function.\n    }\n\n    /// # BLAKE2s Hash Function\n    ///\n    /// Hash a binary buffer with BLAKE2s.\n    ///\n    /// ## Parameters\n    ///\n    /// - `buf`: The binary data buffer to hash.\n    /// - `outlen`: Optional.  The size of the digest.\n    ///             If the outlen is not defined, it defaults to 32.\n    /// - `key`: Optional. The key to use with the hash.\n    ///             If not defined, the hash is not keyed.\n    ///             Should not be > 32 bytes.\n    ///\n    /// ## Returns\n    ///\n    /// - Either a buffer the size requested, with the hash.\n    /// - Or an error:\n    ///     - `key_too_big` if `key` is specified and is > 32 bytes.\n    ///     - `hash_too_big` if `outlen` is specified and is > 32 bytes.\n    ///\n    /// ## Note:\n    ///\n    /// `key` length is checked before `outlen` so if both sizes are invalid, only\n    /// `key_too_big` will be returned.\n    ///\n    blake2s: func( buf: bstr, outlen: option<u8>, key: option<bstr> ) -> result<bstr, errno>;\n\n    /// # BLAKE2b Hash Function\n    ///\n    /// Hash a binary buffer with BLAKE2b.\n    ///\n    /// ## Parameters\n    ///\n    /// - `buf`: The binary data buffer to hash.\n    /// - `outlen`: Optional.  The size of the digest.\n    ///             If the outlen is not defined, it defaults to 64.\n    /// - `key`: Optional. The key to use with the hash.\n    ///             If not defined, the hash is not keyed.\n    ///             Should not be > 64 bytes.\n    ///\n    /// ## Returns\n    ///\n    /// - Either a buffer the size requested, with the hash.\n    /// - Or an error:\n    ///     - `key_too_big` if `key` is specified and is > 64 bytes.\n    ///     - `hash_too_big` if `outlen` is specified and is > 64 bytes.\n    ///\n    /// ## Note:\n    ///\n    /// `key` length is checked before `outlen` so if both sizes are invalid, only\n    /// `key_too_big` will be returned.\n    ///\n    blake2b: func( buf: bstr, outlen: option<u8>, key: option<bstr> ) -> result<bstr, errno>;\n\n    /// # BLAKE3 Hash Function\n    ///\n    /// Hash a binary buffer with BLAKE3.\n    ///\n    /// ## Parameters\n    ///\n    /// - `buf`: The binary data buffer to hash.\n    /// - `outlen`: Optional.  The size of the digest.\n    ///             If the outlen is not defined, it defaults to 32.\n    /// - `key`: Optional. The key to use with the hash.\n    ///             If not defined, the hash is not keyed.\n    ///             Should not be > 32 bytes.\n    ///\n    /// ## Returns\n    ///\n    /// - Either a buffer the size requested, with the hash.\n    /// - Or an error:\n    ///     - `key_too_big` if `key` is specified and is > 32 bytes.\n    ///     - `hash_too_big` if `outlen` is specified and is > 32 bytes.\n    ///\n    /// ## Note:\n    ///\n    /// `key` length is checked before `outlen` so if both sizes are invalid, only\n    /// `key_too_big` will be returned.\n    ///\n    blake3:  func( buf: bstr, outlen: option<u8>, key: option<bstr> ) -> result<bstr, errno>;   \n}\n\n\n/// World just for the Hermes \'hash\' API.\nworld hash-api {\n    import api;\n}\n  ";
    const _: &str = "package hermes:hash;\n\nworld all {\n    import api;\n}\n";
    const _: &str = "package hermes:init;\n\nworld all {\n    import event;\n}\n";
    const _: &str = "/// # Init API\n///\n/// The Init Event is only ever called once per application the webasm module is used in.\n///\n/// ## Permissions\n///\n/// This API is ALWAYS available, and not permissioned.\n\n/// Logging API Interface\ninterface event {\n\n    /// Perform application start up initialization.\n    ///\n    /// This will only ever be called once when the application this module is a part of is started.\n    /// The module must export this interface to use it.\n    ///\n    /// Returns:\n    /// - `true`  - Initialization is successful, the application may commence.\n    /// - `false` - Fatal error during Initialization.  DO NOT START APPLICATION.\n    init: func() -> bool;\n}";
    const _: &str = "package hermes:json;\n\nworld all {\n    import api;\n}\n";
    const _: &str = "/// # JSON API\n///\n/// JSON Data types and functions.\n///\n/// ## Permissions\n///\n/// This API is permissionless.\n\n// cspell: words\n\n/// JSON API Interface - Imports ONLY\ninterface api {\n    /// JSON is just a string.\n    ///   This type is used to indicate the string MUST be properly formatted JSON.\n    type json = string;\n}\n\n\n/// World just for the Hermes \'json\' API.\nworld json-api {\n    import api;\n}\n  ";
    const _: &str = "package hermes:kv-store;\n\nworld all {\n    import api;\n    import event;\n}\n";
    const _: &str = "/// Interface to local in-memory K-V database instance.\n/// \n/// This API is atomic.  It is safe to call it from multiple wasm modules in the same application.\n/// The atomic nature of these calls allows multiple wasm modules to communicate without data race \n/// conditions through the KV store.\n///\n/// These are primitive operations, and the caller is expected to provide more complex semaphore/mutex\n/// logic on top of these building blocks, if required.\n/// \n/// There is no support for multi-key atomic operations, the application is required to manage\n/// multi-key updates given the functionality provided here.\n/// For example, a single Key could be used to \"Lock\" a set of other keys.\n/// \n/// There is no protection against deadlock, if a key is used as a semaphore/mutex then it is the\n/// responsibility of the applications modules to properly manage them.\n/// \ninterface api {\n    /// Get the `bstr` type from the `hermes:binary` module.\n    use hermes:binary/api.{bstr};\n    /// Get the `cbor` type from the `hermes:cbor` module.\n    use hermes:cbor/api.{cbor};\n    /// Get the `json` type from the `hermes:json` module.\n    use hermes:json/api.{json};\n\n    /// A time and date in seconds plus nanoseconds.\n    variant kv-values {\n      kv-string(string),  // A String\n      kv-s64(s64),        // Just use the largest signed integer type supported\n      kv-u64(u64),        // Just use the largest integer type supported\n      kv-f64(float64),    // Just use the largest float type supported\n      kv-bstr(bstr),      // A byte string\n      kv-cbor(cbor),      // CBOR data\n      kv-json(json)       // JSON data\n    }\n\n  /// Set a value in the local key-value store\n  /// Setting None will cause the Key to be deleted from the KV store.\n  kv-set: func(key: string, value: option<kv-values>);\n\n  /// Get a value from the local key-value store\n  /// Returns the default if not set.\n  kv-get-default: func(key: string, default: option<kv-values>) -> option<kv-values>;\n\n  /// Get a value from the local key-value store\n  /// Returns None if the Key does not exist in the KV Store.\n  /// This is a convenience function, and is equivalent to `kv-get-default(key, none)`\n  kv-get: func(key: string) -> option<kv-values>;\n\n  /// Get a value, and then set it (Atomic)\n  /// Setting None will cause the Key to be deleted from the KV store.\n  kv-get-set: func(key: string, value: option<kv-values>) -> option<kv-values>;\n\n  /// Get a value, and then add to it (Atomic)\n  /// Adding to a string will concatenate the string.\n  ///   String concatenation will only occur up to the maximum possible size of a string value.\\\n  ///   Concatenation beyond the maximum size will result in truncation.\n  /// Adding to a numeric will have the expected behavior (rounded to nearest if necessary).\n  ///   The original type does not change, so: `float64 + u64 = float64`.  `s64 + float64 = s64`\n  ///   If the value overflows or under-flows it will saturate at the limit.\n  ///   This behavior allows us to decrement values by using the signed version, so `u64(10) + s64(-5) = u64(5))`\n  /// If a string is added to a numeric, nothing happens.\n  /// If a numeric is added to a string, it is converted to a string first, and then concatenated\n  ///   Note: There will be no spaces added.  So \"My string\" + u32(77) = \"My string77\"\n  kv-add: func(key: string, value: option<kv-values>) -> option<kv-values>;\n\n  /// Check if the Key equals a test value (exact match) and if it does, store the new value.\n  /// In all cases, the current value is returned.\n  /// If the types are NOT the same, the comparison will fail, even if the values are equivalent.\n  /// For example: `u64(7) != s64(7)`, `float64(-1) != s64(-1)`.\n  kv-cas: func(key: string, test: option<kv-values>, value: option<kv-values>) -> option<kv-values>;\n\n  /// Subscribe to any updates made to a particular Key.\n  /// After this call, this module will receive Key Update events when a key is written.\n  /// It returns the current value of the Key and None if it is not set.\n  kv-subscribe: func(key: string) -> option<kv-values>;\n\n  /// Unsubscribe to any updates made to a particular Key.\n  /// After this call, this module will no longer receive Key Update events when a key is written.\n  /// It returns the current value of the Key and None if it is not set.\n  kv-unsubscribe: func(key: string) -> option<kv-values>;\n}\n";
    const _: &str = "/// Interface to local in-memory K-V database instance.\n///\n/// ## Permissions\n///\n/// This API is ALWAYS available.  It is permissionless.\n\n/// Logging API Interface\ninterface event {\n\n    use api.{kv-values};\n\n    /// A Subscribed key has updated.\n    ///\n    /// This will only ever be called if the module has subscribed to updates using \n    /// `kv-subscribe`\n    ///\n    /// Returns:\n    ///     Nothing.\n    kv-update: func(key: string, value: kv-values);\n}";
    const _: &str = "package hermes:localtime;\n\n// API\n    // localtime struct\n        // timezone string\n        // dd(u8 1-31) mm(u8 1-12) yy (s16 -32677 - +32767) hh(u8 0-11) mm(u8 0-59) ss(u8 0-59)\n\n    // Get localized time\n        // (optional secs since 1970 UTC time)\n        // (optional timezone string)\n\n    // localtime to UTC time\n    \n\nworld all {\n    import api;\n}";
    const _: &str = "/// # Localtime API\n///\n/// Localtime API functionality exposed to the Hermes WASM Modules.\n///\n/// ## Permissions\n///\n/// This API is ALWAYS available.\n\n/// Logging API Interface\ninterface api {\n\n    /// Get the `datetime` type from the `wasi:clocks` module.\n    use wasi:clocks/wall-clock@0.2.0.{datetime};\n\n    // The timezone we are localized for.\n    type timezone = string;\n\n    // Time in localtime format.\n    record localtime {\n        year: u64,   // Year \n        month: u8,   // Month (0-11)\n        dow: u8,     // Day of week (0-6)\n        day: u8,     // Day (1-31)\n\n        hh: u8,      // Hour (0-23)\n        mm: u8,      // Minute (0-59)\n        ss: u8,      // Second (0-59)\n\n        ns: u32,     // Nanoseconds\n\n        tz: timezone // Timezone string.\n    }\n\n    // Errors that can occur converting times\n    enum errno {\n        invalid-localtime,\n        unknown-timezone,\n        year-out-of-range // The earliest year which can convert to a datetime is 1970.\n\n    }\n\n    /// Get localtime from a datetime or now.\n    /// \n    /// **Parameters**\n    /// \n    /// `when` : The datetime we want to convert (Optional, if not set it will convert `now`).\n    /// `tz` : The timezone to use. (Optional, if not set uses the local machines configured local timezone.)\n    /// \n    /// **Returns**\n    /// \n    /// `localtime` : the converted time.\n    /// `errno`     : An error indicating why conversion failed.\n    /// \n    get-localtime: func(when: option<datetime>, tz: option<timezone>) -> result<localtime, errno>;\n\n\n    /// Get a new localtime from a localtime, by recalculating time for a new timezone.\n    /// \n    /// **Parameters**\n    /// \n    /// `time` : The localtime to convert.\n    /// `tz` : The timezone to use. (Optional, if not set uses the local machines configured local timezone.)\n    /// \n    /// **Returns**\n    /// \n    /// `localtime` : the converted time.\n    /// `errno`     : An error indicating why conversion failed.\n    /// \n    alt-localtime: func(time: localtime, tz: option<timezone>) -> result<localtime, errno>;\n\n    /// Get a datetime from a localtime.\n    /// \n    /// **Parameters**\n    /// \n    /// `time` : The localtime to convert.\n    /// \n    /// **Returns**\n    /// \n    /// `datetime`  : the converted time.\n    /// `errno`     : An error indicating why conversion failed.\n    /// \n    get-datetime: func(time: localtime) -> result<datetime, errno>;\n}\n\n/// World just for the Hermes \'json\' API.\nworld localtime-api {\n    import api;\n}\n";
    const _: &str = "/// # Logging API\n///\n/// Logging API functionality exposed to the Hermes WASM Modules.\n///\n/// ## Permissions\n///\n/// This API is ALWAYS available, and not permissionless.\n\n/// Logging API Interface\ninterface api {\n    use hermes:json/api.{json};\n\n    /// The supported logging levels\n    enum level {\n        /// Debug Log Level\n        debug,\n        /// Tracing Log level\n        trace,\n        /// General Informational Log Level\n        info,\n        /// Warning about something that might be a problem.\n        warn,\n        /// A very serious error\n        error,\n    }\n\n    /// Generate a Log\n    ///\n    /// The Hermes API will add extra information to the log, such as the instance of the webasm\n    /// module being logged.\n    /// The Webasm module does not need to concern itself with this kind of information, and should\n    /// log as if it is the only instance.\n    /// It also should not log any webasm shared context, except where it is relevant to the log message itself.\n    ///\n    /// **Parameters**\n    ///\n    /// - `level` : The log level this message is for. \n    /// - `file`  : The name of the src file being logged from. (Optional)\n    /// - `fn`    : The function within the file being logged from. (Optional)\n    /// - `line`  : The line of code the log was generated from. (Optional)\n    /// - `col`   : The column of code the log was generated from. (Optional)\n    /// - `ctx`   : The logging context.  (Should have no newlines or formatting).\n    /// - `msg`   : A Single line message to be logged. (Should have no newlines or formatting).\n    /// - `data`  : A Free form json payload that will be logged with the msg.  This must be valid JSON.\n    ///\n    /// *Notes*\n    ///\n    /// The `data` parameter may contain a record of the format:\n    /// ```json\n    /// {\n    ///     \"bt\" : [ <string> , <string> ]\n    /// }\n    /// ```\n    /// The logger will interpret this as a backtrace where each entry in the array is one line of the backtrace.\n    /// The format of the backtrace lines is up to the webasm module generating the log.\n    /// The individual backtrace entries may contain line breaks if the backtrace entry is\n    /// multiline.\n    ///     * Multiline backtrace entries should be de-dented, relative to the first line.  \n    ///     * This is to allow the display to properly format multiline entries.\n    /// This format is designed to keep the broadest flexibility for multiple languages capabilities.\n    /// The backtrace must be sorted with most recent lines of the backtrace occurring first in the array.\n    /// Backtrace must be contained in a single `log` call.  Multiple log calls will be considered independent logs.\n    log: func(level: level, \n                file: option<string>, fn: option<string>, line: option<u32>, col:option<u32>, \n                ctx: option<string>, \n                msg: string, \n                data: option<json>);\n}\n\n/// World just for the Hermes \'json\' API.\nworld logging-api {\n    import api;\n}\n";
    const _: &str = "package hermes:logging;\n\nworld all {\n    import api;\n}\n";
    const _: &str = "package wasi:io@0.2.0;\n\n\ninterface error {\n    /// A resource which represents some error information.\n    ///\n    /// The only method provided by this resource is `to-debug-string`,\n    /// which provides some human-readable information about the error.\n    ///\n    /// In the `wasi:io` package, this resource is returned through the\n    /// `wasi:io/streams/stream-error` type.\n    ///\n    /// To provide more specific error information, other interfaces may\n    /// provide functions to further \"downcast\" this error into more specific\n    /// error information. For example, `error`s returned in streams derived\n    /// from filesystem types to be described using the filesystem\'s own\n    /// error-code type, using the function\n    /// `wasi:filesystem/types/filesystem-error-code`, which takes a parameter\n    /// `borrow<error>` and returns\n    /// `option<wasi:filesystem/types/error-code>`.\n    ///\n    /// The set of functions which can \"downcast\" an `error` into a more\n    /// concrete type is open.\n    resource error {\n        /// Returns a string that is suitable to assist humans in debugging\n        /// this error.\n        ///\n        /// WARNING: The returned string should not be consumed mechanically!\n        /// It may change across platforms, hosts, or other implementation\n        /// details. Parsing this string is a major platform-compatibility\n        /// hazard.\n        to-debug-string: func() -> string;\n    }\n}\n";
    const _: &str = "package wasi:io@0.2.0;\n\nworld imports {\n    import streams;\n    //import poll;\n}\n";
    const _: &str = "package wasi:io@0.2.0;\n\n/// WASI I/O is an I/O abstraction API which is currently focused on providing\n/// stream types.\n///\n/// In the future, the component model is expected to add built-in stream types;\n/// when it does, they are expected to subsume this API.\ninterface streams {\n    use error.{error};\n\n    /*\n    // Hermes does not support `poll`\n    use poll.{pollable};\n    */\n\n    /// An error for input-stream and output-stream operations.\n    variant stream-error {\n        /// The last operation (a write or flush) failed before completion.\n        ///\n        /// More information is available in the `error` payload.\n        last-operation-failed(error),\n        /// The stream is closed: no more input will be accepted by the\n        /// stream. A closed output-stream will return this error on all\n        /// future operations.\n        closed\n    }\n\n    /// An input bytestream.\n    ///\n    /// `input-stream`s are *non-blocking* to the extent practical on underlying\n    /// platforms. I/O operations always return promptly; if fewer bytes are\n    /// promptly available than requested, they return the number of bytes promptly\n    /// available, which could even be zero. To wait for data to be available,\n    /// use the `subscribe` function to obtain a `pollable` which can be polled\n    /// for using `wasi:io/poll`.\n    resource input-stream {\n        /// Perform a non-blocking read from the stream.\n        ///\n        /// This function returns a list of bytes containing the read data,\n        /// when successful. The returned list will contain up to `len` bytes;\n        /// it may return fewer than requested, but not more. The list is\n        /// empty when no bytes are available for reading at this time. The\n        /// pollable given by `subscribe` will be ready when more bytes are\n        /// available.\n        ///\n        /// This function fails with a `stream-error` when the operation\n        /// encounters an error, giving `last-operation-failed`, or when the\n        /// stream is closed, giving `closed`.\n        ///\n        /// When the caller gives a `len` of 0, it represents a request to\n        /// read 0 bytes. If the stream is still open, this call should\n        /// succeed and return an empty list, or otherwise fail with `closed`.\n        ///\n        /// The `len` parameter is a `u64`, which could represent a list of u8 which\n        /// is not possible to allocate in wasm32, or not desirable to allocate as\n        /// as a return value by the callee. The callee may return a list of bytes\n        /// less than `len` in size while more bytes are available for reading.\n        read: func(\n            /// The maximum number of bytes to read\n            len: u64\n        ) -> result<list<u8>, stream-error>;\n\n        /// Read bytes from a stream, after blocking until at least one byte can\n        /// be read. Except for blocking, behavior is identical to `read`.\n        blocking-read: func(\n            /// The maximum number of bytes to read\n            len: u64\n        ) -> result<list<u8>, stream-error>;\n\n        /// Skip bytes from a stream. Returns number of bytes skipped.\n        ///\n        /// Behaves identical to `read`, except instead of returning a list\n        /// of bytes, returns the number of bytes consumed from the stream.\n        skip: func(\n            /// The maximum number of bytes to skip.\n            len: u64,\n        ) -> result<u64, stream-error>;\n\n        /// Skip bytes from a stream, after blocking until at least one byte\n        /// can be skipped. Except for blocking behavior, identical to `skip`.\n        blocking-skip: func(\n            /// The maximum number of bytes to skip.\n            len: u64,\n        ) -> result<u64, stream-error>;\n\n        /*\n        /// Create a `pollable` which will resolve once either the specified stream\n        /// has bytes available to read or the other end of the stream has been\n        /// closed.\n        /// The created `pollable` is a child resource of the `input-stream`.\n        /// Implementations may trap if the `input-stream` is dropped before\n        /// all derived `pollable`s created with this function are dropped.\n        subscribe: func() -> pollable;\n        */\n    }\n\n\n    /// An output bytestream.\n    ///\n    /// `output-stream`s are *non-blocking* to the extent practical on\n    /// underlying platforms. Except where specified otherwise, I/O operations also\n    /// always return promptly, after the number of bytes that can be written\n    /// promptly, which could even be zero. To wait for the stream to be ready to\n    /// accept data, the `subscribe` function to obtain a `pollable` which can be\n    /// polled for using `wasi:io/poll`.\n    resource output-stream {\n        /// Check readiness for writing. This function never blocks.\n        ///\n        /// Returns the number of bytes permitted for the next call to `write`,\n        /// or an error. Calling `write` with more bytes than this function has\n        /// permitted will trap.\n        ///\n        /// When this function returns 0 bytes, the `subscribe` pollable will\n        /// become ready when this function will report at least 1 byte, or an\n        /// error.\n        check-write: func() -> result<u64, stream-error>;\n\n        /// Perform a write. This function never blocks.\n        ///\n        /// Precondition: check-write gave permit of Ok(n) and contents has a\n        /// length of less than or equal to n. Otherwise, this function will trap.\n        ///\n        /// returns Err(closed) without writing if the stream has closed since\n        /// the last call to check-write provided a permit.\n        write: func(\n            contents: list<u8>\n        ) -> result<_, stream-error>;\n\n        /// Perform a write of up to 4096 bytes, and then flush the stream. Block\n        /// until all of these operations are complete, or an error occurs.\n        ///\n        /// This is a convenience wrapper around the use of `check-write`,\n        /// `subscribe`, `write`, and `flush`, and is implemented with the\n        /// following pseudo-code:\n        ///\n        /// ```text\n        /// let pollable = this.subscribe();\n        /// while !contents.is_empty() {\n        ///     // Wait for the stream to become writable\n        ///     poll-one(pollable);\n        ///     let Ok(n) = this.check-write(); // eliding error handling\n        ///     let len = min(n, contents.len());\n        ///     let (chunk, rest) = contents.split_at(len);\n        ///     this.write(chunk  );            // eliding error handling\n        ///     contents = rest;\n        /// }\n        /// this.flush();\n        /// // Wait for completion of `flush`\n        /// poll-one(pollable);\n        /// // Check for any errors that arose during `flush`\n        /// let _ = this.check-write();         // eliding error handling\n        /// ```\n        blocking-write-and-flush: func(\n            contents: list<u8>\n        ) -> result<_, stream-error>;\n\n        /// Request to flush buffered output. This function never blocks.\n        ///\n        /// This tells the output-stream that the caller intends any buffered\n        /// output to be flushed. the output which is expected to be flushed\n        /// is all that has been passed to `write` prior to this call.\n        ///\n        /// Upon calling this function, the `output-stream` will not accept any\n        /// writes (`check-write` will return `ok(0)`) until the flush has\n        /// completed. The `subscribe` pollable will become ready when the\n        /// flush has completed and the stream can accept more writes.\n        flush: func() -> result<_, stream-error>;\n\n        /// Request to flush buffered output, and block until flush completes\n        /// and stream is ready for writing again.\n        blocking-flush: func() -> result<_, stream-error>;\n\n        /*\n        /// Create a `pollable` which will resolve once the output-stream\n        /// is ready for more writing, or an error has occured. When this\n        /// pollable is ready, `check-write` will return `ok(n)` with n>0, or an\n        /// error.\n        ///\n        /// If the stream is closed, this pollable is always ready immediately.\n        ///\n        /// The created `pollable` is a child resource of the `output-stream`.\n        /// Implementations may trap if the `output-stream` is dropped before\n        /// all derived `pollable`s created with this function are dropped.\n        subscribe: func() -> pollable;\n        */\n\n        /// Write zeroes to a stream.\n        ///\n        /// this should be used precisely like `write` with the exact same\n        /// preconditions (must use check-write first), but instead of\n        /// passing a list of bytes, you simply pass the number of zero-bytes\n        /// that should be written.\n        write-zeroes: func(\n            /// The number of zero-bytes to write\n            len: u64\n        ) -> result<_, stream-error>;\n\n        /// Perform a write of up to 4096 zeroes, and then flush the stream.\n        /// Block until all of these operations are complete, or an error\n        /// occurs.\n        ///\n        /// This is a convenience wrapper around the use of `check-write`,\n        /// `subscribe`, `write-zeroes`, and `flush`, and is implemented with\n        /// the following pseudo-code:\n        ///\n        /// ```text\n        /// let pollable = this.subscribe();\n        /// while num_zeroes != 0 {\n        ///     // Wait for the stream to become writable\n        ///     poll-one(pollable);\n        ///     let Ok(n) = this.check-write(); // eliding error handling\n        ///     let len = min(n, num_zeroes);\n        ///     this.write-zeroes(len);         // eliding error handling\n        ///     num_zeroes -= len;\n        /// }\n        /// this.flush();\n        /// // Wait for completion of `flush`\n        /// poll-one(pollable);\n        /// // Check for any errors that arose during `flush`\n        /// let _ = this.check-write();         // eliding error handling\n        /// ```\n        blocking-write-zeroes-and-flush: func(\n            /// The number of zero-bytes to write\n            len: u64\n        ) -> result<_, stream-error>;\n\n        /// Read from one stream and write to another.\n        ///\n        /// The behavior of splice is equivelant to:\n        /// 1. calling `check-write` on the `output-stream`\n        /// 2. calling `read` on the `input-stream` with the smaller of the\n        /// `check-write` permitted length and the `len` provided to `splice`\n        /// 3. calling `write` on the `output-stream` with that read data.\n        ///\n        /// Any error reported by the call to `check-write`, `read`, or\n        /// `write` ends the splice and reports that error.\n        ///\n        /// This function returns the number of bytes transferred; it may be less\n        /// than `len`.\n        splice: func(\n            /// The stream to read from\n            src: borrow<input-stream>,\n            /// The number of bytes to splice\n            len: u64,\n        ) -> result<u64, stream-error>;\n\n        /// Read from one stream and write to another, with blocking.\n        ///\n        /// This is similar to `splice`, except that it blocks until the\n        /// `output-stream` is ready for writing, and the `input-stream`\n        /// is ready for reading, before performing the `splice`.\n        blocking-splice: func(\n            /// The stream to read from\n            src: borrow<input-stream>,\n            /// The number of bytes to splice\n            len: u64,\n        ) -> result<u64, stream-error>;\n    }\n}\n";
    const _: &str = "package wasi:filesystem@0.2.0;\n\nworld imports {\n    import types;\n    import preopens;\n}\n";
    const _: &str = "package wasi:filesystem@0.2.0;\n\ninterface preopens {\n    use types.{descriptor};\n\n    /// Return the set of preopened directories, and their path.\n    get-directories: func() -> list<tuple<descriptor, string>>;\n}\n";
    const _: &str = "package wasi:filesystem@0.2.0;\n/// WASI filesystem is a filesystem API primarily intended to let users run WASI\n/// programs that access their files on their existing filesystems, without\n/// significant overhead.\n///\n/// It is intended to be roughly portable between Unix-family platforms and\n/// Windows, though it does not hide many of the major differences.\n///\n/// Paths are passed as interface-type `string`s, meaning they must consist of\n/// a sequence of Unicode Scalar Values (USVs). Some filesystems may contain\n/// paths which are not accessible by this API.\n///\n/// The directory separator in WASI is always the forward-slash (`/`).\n///\n/// All paths in WASI are relative paths, and are interpreted relative to a\n/// `descriptor` referring to a base directory. If a `path` argument to any WASI\n/// function starts with `/`, or if any step of resolving a `path`, including\n/// `..` and symbolic link steps, reaches a directory outside of the base\n/// directory, or reaches a symlink to an absolute or rooted path in the\n/// underlying filesystem, the function fails with `error-code::not-permitted`.\n///\n/// For more information about WASI path resolution and sandboxing, see\n/// [WASI filesystem path resolution].\n///\n/// [WASI filesystem path resolution]: https://github.com/WebAssembly/wasi-filesystem/blob/main/path-resolution.md\ninterface types {\n    use wasi:io/streams@0.2.0.{input-stream, output-stream, error};\n    use wasi:clocks/wall-clock@0.2.0.{datetime};\n\n    /// File size or length of a region within a file.\n    type filesize = u64;\n\n    /// The type of a filesystem object referenced by a descriptor.\n    ///\n    /// Note: This was called `filetype` in earlier versions of WASI.\n    enum descriptor-type {\n        /// The type of the descriptor or file is unknown or is different from\n        /// any of the other types specified.\n        unknown,\n        /// The descriptor refers to a block device inode.\n        block-device,\n        /// The descriptor refers to a character device inode.\n        character-device,\n        /// The descriptor refers to a directory inode.\n        directory,\n        /// The descriptor refers to a named pipe.\n        fifo,\n        /// The file refers to a symbolic link inode.\n        symbolic-link,\n        /// The descriptor refers to a regular file inode.\n        regular-file,\n        /// The descriptor refers to a socket.\n        socket,\n    }\n\n    /// Descriptor flags.\n    ///\n    /// Note: This was called `fdflags` in earlier versions of WASI.\n    flags descriptor-flags {\n        /// Read mode: Data can be read.\n        read,\n        /// Write mode: Data can be written to.\n        write,\n        /// Request that writes be performed according to synchronized I/O file\n        /// integrity completion. The data stored in the file and the file\'s\n        /// metadata are synchronized. This is similar to `O_SYNC` in POSIX.\n        ///\n        /// The precise semantics of this operation have not yet been defined for\n        /// WASI. At this time, it should be interpreted as a request, and not a\n        /// requirement.\n        file-integrity-sync,\n        /// Request that writes be performed according to synchronized I/O data\n        /// integrity completion. Only the data stored in the file is\n        /// synchronized. This is similar to `O_DSYNC` in POSIX.\n        ///\n        /// The precise semantics of this operation have not yet been defined for\n        /// WASI. At this time, it should be interpreted as a request, and not a\n        /// requirement.\n        data-integrity-sync,\n        /// Requests that reads be performed at the same level of integrety\n        /// requested for writes. This is similar to `O_RSYNC` in POSIX.\n        ///\n        /// The precise semantics of this operation have not yet been defined for\n        /// WASI. At this time, it should be interpreted as a request, and not a\n        /// requirement.\n        requested-write-sync,\n        /// Mutating directories mode: Directory contents may be mutated.\n        ///\n        /// When this flag is unset on a descriptor, operations using the\n        /// descriptor which would create, rename, delete, modify the data or\n        /// metadata of filesystem objects, or obtain another handle which\n        /// would permit any of those, shall fail with `error-code::read-only` if\n        /// they would otherwise succeed.\n        ///\n        /// This may only be set on directories.\n        mutate-directory,\n    }\n\n    /// File attributes.\n    ///\n    /// Note: This was called `filestat` in earlier versions of WASI.\n    record descriptor-stat {\n        /// File type.\n        %type: descriptor-type,\n        /// Number of hard links to the file.\n        link-count: link-count,\n        /// For regular files, the file size in bytes. For symbolic links, the\n        /// length in bytes of the pathname contained in the symbolic link.\n        size: filesize,\n        /// Last data access timestamp.\n        ///\n        /// If the `option` is none, the platform doesn\'t maintain an access\n        /// timestamp for this file.\n        data-access-timestamp: option<datetime>,\n        /// Last data modification timestamp.\n        ///\n        /// If the `option` is none, the platform doesn\'t maintain a\n        /// modification timestamp for this file.\n        data-modification-timestamp: option<datetime>,\n        /// Last file status-change timestamp.\n        ///\n        /// If the `option` is none, the platform doesn\'t maintain a\n        /// status-change timestamp for this file.\n        status-change-timestamp: option<datetime>,\n    }\n\n    /// Flags determining the method of how paths are resolved.\n    flags path-flags {\n        /// As long as the resolved path corresponds to a symbolic link, it is\n        /// expanded.\n        symlink-follow,\n    }\n\n    /// Open flags used by `open-at`.\n    flags open-flags {\n        /// Create file if it does not exist, similar to `O_CREAT` in POSIX.\n        create,\n        /// Fail if not a directory, similar to `O_DIRECTORY` in POSIX.\n        directory,\n        /// Fail if file already exists, similar to `O_EXCL` in POSIX.\n        exclusive,\n        /// Truncate file to size 0, similar to `O_TRUNC` in POSIX.\n        truncate,\n    }\n\n    /// Number of hard links to an inode.\n    type link-count = u64;\n\n    /// When setting a timestamp, this gives the value to set it to.\n    variant new-timestamp {\n        /// Leave the timestamp set to its previous value.\n        no-change,\n        /// Set the timestamp to the current time of the system clock associated\n        /// with the filesystem.\n        now,\n        /// Set the timestamp to the given value.\n        timestamp(datetime),\n    }\n\n    /// A directory entry.\n    record directory-entry {\n        /// The type of the file referred to by this directory entry.\n        %type: descriptor-type,\n\n        /// The name of the object.\n        name: string,\n    }\n\n    /// Error codes returned by functions, similar to `errno` in POSIX.\n    /// Not all of these error codes are returned by the functions provided by this\n    /// API; some are used in higher-level library layers, and others are provided\n    /// merely for alignment with POSIX.\n    enum error-code {\n        /// Permission denied, similar to `EACCES` in POSIX.\n        access,\n        /// Resource unavailable, or operation would block, similar to `EAGAIN` and `EWOULDBLOCK` in POSIX.\n        would-block,\n        /// Connection already in progress, similar to `EALREADY` in POSIX.\n        already,\n        /// Bad descriptor, similar to `EBADF` in POSIX.\n        bad-descriptor,\n        /// Device or resource busy, similar to `EBUSY` in POSIX.\n        busy,\n        /// Resource deadlock would occur, similar to `EDEADLK` in POSIX.\n        deadlock,\n        /// Storage quota exceeded, similar to `EDQUOT` in POSIX.\n        quota,\n        /// File exists, similar to `EEXIST` in POSIX.\n        exist,\n        /// File too large, similar to `EFBIG` in POSIX.\n        file-too-large,\n        /// Illegal byte sequence, similar to `EILSEQ` in POSIX.\n        illegal-byte-sequence,\n        /// Operation in progress, similar to `EINPROGRESS` in POSIX.\n        in-progress,\n        /// Interrupted function, similar to `EINTR` in POSIX.\n        interrupted,\n        /// Invalid argument, similar to `EINVAL` in POSIX.\n        invalid,\n        /// I/O error, similar to `EIO` in POSIX.\n        io,\n        /// Is a directory, similar to `EISDIR` in POSIX.\n        is-directory,\n        /// Too many levels of symbolic links, similar to `ELOOP` in POSIX.\n        loop,\n        /// Too many links, similar to `EMLINK` in POSIX.\n        too-many-links,\n        /// Message too large, similar to `EMSGSIZE` in POSIX.\n        message-size,\n        /// Filename too long, similar to `ENAMETOOLONG` in POSIX.\n        name-too-long,\n        /// No such device, similar to `ENODEV` in POSIX.\n        no-device,\n        /// No such file or directory, similar to `ENOENT` in POSIX.\n        no-entry,\n        /// No locks available, similar to `ENOLCK` in POSIX.\n        no-lock,\n        /// Not enough space, similar to `ENOMEM` in POSIX.\n        insufficient-memory,\n        /// No space left on device, similar to `ENOSPC` in POSIX.\n        insufficient-space,\n        /// Not a directory or a symbolic link to a directory, similar to `ENOTDIR` in POSIX.\n        not-directory,\n        /// Directory not empty, similar to `ENOTEMPTY` in POSIX.\n        not-empty,\n        /// State not recoverable, similar to `ENOTRECOVERABLE` in POSIX.\n        not-recoverable,\n        /// Not supported, similar to `ENOTSUP` and `ENOSYS` in POSIX.\n        unsupported,\n        /// Inappropriate I/O control operation, similar to `ENOTTY` in POSIX.\n        no-tty,\n        /// No such device or address, similar to `ENXIO` in POSIX.\n        no-such-device,\n        /// Value too large to be stored in data type, similar to `EOVERFLOW` in POSIX.\n        overflow,\n        /// Operation not permitted, similar to `EPERM` in POSIX.\n        not-permitted,\n        /// Broken pipe, similar to `EPIPE` in POSIX.\n        pipe,\n        /// Read-only file system, similar to `EROFS` in POSIX.\n        read-only,\n        /// Invalid seek, similar to `ESPIPE` in POSIX.\n        invalid-seek,\n        /// Text file busy, similar to `ETXTBSY` in POSIX.\n        text-file-busy,\n        /// Cross-device link, similar to `EXDEV` in POSIX.\n        cross-device,\n    }\n\n    /// File or memory access pattern advisory information.\n    enum advice {\n        /// The application has no advice to give on its behavior with respect\n        /// to the specified data.\n        normal,\n        /// The application expects to access the specified data sequentially\n        /// from lower offsets to higher offsets.\n        sequential,\n        /// The application expects to access the specified data in a random\n        /// order.\n        random,\n        /// The application expects to access the specified data in the near\n        /// future.\n        will-need,\n        /// The application expects that it will not access the specified data\n        /// in the near future.\n        dont-need,\n        /// The application expects to access the specified data once and then\n        /// not reuse it thereafter.\n        no-reuse,\n    }\n\n    /// A 128-bit hash value, split into parts because wasm doesn\'t have a\n    /// 128-bit integer type.\n    record metadata-hash-value {\n       /// 64 bits of a 128-bit hash value.\n       lower: u64,\n       /// Another 64 bits of a 128-bit hash value.\n       upper: u64,\n    }\n\n    /// A descriptor is a reference to a filesystem object, which may be a file,\n    /// directory, named pipe, special file, or other object on which filesystem\n    /// calls may be made.\n    resource descriptor {\n        /// Return a stream for reading from a file, if available.\n        ///\n        /// May fail with an error-code describing why the file cannot be read.\n        ///\n        /// Multiple read, write, and append streams may be active on the same open\n        /// file and they do not interfere with each other.\n        ///\n        /// Note: This allows using `read-stream`, which is similar to `read` in POSIX.\n        read-via-stream: func(\n            /// The offset within the file at which to start reading.\n            offset: filesize,\n        ) -> result<input-stream, error-code>;\n\n        /// Return a stream for writing to a file, if available.\n        ///\n        /// May fail with an error-code describing why the file cannot be written.\n        ///\n        /// Note: This allows using `write-stream`, which is similar to `write` in\n        /// POSIX.\n        write-via-stream: func(\n            /// The offset within the file at which to start writing.\n            offset: filesize,\n        ) -> result<output-stream, error-code>;\n\n        /// Return a stream for appending to a file, if available.\n        ///\n        /// May fail with an error-code describing why the file cannot be appended.\n        ///\n        /// Note: This allows using `write-stream`, which is similar to `write` with\n        /// `O_APPEND` in in POSIX.\n        append-via-stream: func() -> result<output-stream, error-code>;\n\n        /// Provide file advisory information on a descriptor.\n        ///\n        /// This is similar to `posix_fadvise` in POSIX.\n        advise: func(\n            /// The offset within the file to which the advisory applies.\n            offset: filesize,\n            /// The length of the region to which the advisory applies.\n            length: filesize,\n            /// The advice.\n            advice: advice\n        ) -> result<_, error-code>;\n\n        /// Synchronize the data of a file to disk.\n        ///\n        /// This function succeeds with no effect if the file descriptor is not\n        /// opened for writing.\n        ///\n        /// Note: This is similar to `fdatasync` in POSIX.\n        sync-data: func() -> result<_, error-code>;\n\n        /// Get flags associated with a descriptor.\n        ///\n        /// Note: This returns similar flags to `fcntl(fd, F_GETFL)` in POSIX.\n        ///\n        /// Note: This returns the value that was the `fs_flags` value returned\n        /// from `fdstat_get` in earlier versions of WASI.\n        get-flags: func() -> result<descriptor-flags, error-code>;\n\n        /// Get the dynamic type of a descriptor.\n        ///\n        /// Note: This returns the same value as the `type` field of the `fd-stat`\n        /// returned by `stat`, `stat-at` and similar.\n        ///\n        /// Note: This returns similar flags to the `st_mode & S_IFMT` value provided\n        /// by `fstat` in POSIX.\n        ///\n        /// Note: This returns the value that was the `fs_filetype` value returned\n        /// from `fdstat_get` in earlier versions of WASI.\n        get-type: func() -> result<descriptor-type, error-code>;\n\n        /// Adjust the size of an open file. If this increases the file\'s size, the\n        /// extra bytes are filled with zeros.\n        ///\n        /// Note: This was called `fd_filestat_set_size` in earlier versions of WASI.\n        set-size: func(size: filesize) -> result<_, error-code>;\n\n        /// Adjust the timestamps of an open file or directory.\n        ///\n        /// Note: This is similar to `futimens` in POSIX.\n        ///\n        /// Note: This was called `fd_filestat_set_times` in earlier versions of WASI.\n        set-times: func(\n            /// The desired values of the data access timestamp.\n            data-access-timestamp: new-timestamp,\n            /// The desired values of the data modification timestamp.\n            data-modification-timestamp: new-timestamp,\n        ) -> result<_, error-code>;\n\n        /// Read from a descriptor, without using and updating the descriptor\'s offset.\n        ///\n        /// This function returns a list of bytes containing the data that was\n        /// read, along with a bool which, when true, indicates that the end of the\n        /// file was reached. The returned list will contain up to `length` bytes; it\n        /// may return fewer than requested, if the end of the file is reached or\n        /// if the I/O operation is interrupted.\n        ///\n        /// In the future, this may change to return a `stream<u8, error-code>`.\n        ///\n        /// Note: This is similar to `pread` in POSIX.\n        read: func(\n            /// The maximum number of bytes to read.\n            length: filesize,\n            /// The offset within the file at which to read.\n            offset: filesize,\n        ) -> result<tuple<list<u8>, bool>, error-code>;\n\n        /// Write to a descriptor, without using and updating the descriptor\'s offset.\n        ///\n        /// It is valid to write past the end of a file; the file is extended to the\n        /// extent of the write, with bytes between the previous end and the start of\n        /// the write set to zero.\n        ///\n        /// In the future, this may change to take a `stream<u8, error-code>`.\n        ///\n        /// Note: This is similar to `pwrite` in POSIX.\n        write: func(\n            /// Data to write\n            buffer: list<u8>,\n            /// The offset within the file at which to write.\n            offset: filesize,\n        ) -> result<filesize, error-code>;\n\n        /// Read directory entries from a directory.\n        ///\n        /// On filesystems where directories contain entries referring to themselves\n        /// and their parents, often named `.` and `..` respectively, these entries\n        /// are omitted.\n        ///\n        /// This always returns a new stream which starts at the beginning of the\n        /// directory. Multiple streams may be active on the same directory, and they\n        /// do not interfere with each other.\n        read-directory: func() -> result<directory-entry-stream, error-code>;\n\n        /// Synchronize the data and metadata of a file to disk.\n        ///\n        /// This function succeeds with no effect if the file descriptor is not\n        /// opened for writing.\n        ///\n        /// Note: This is similar to `fsync` in POSIX.\n        sync: func() -> result<_, error-code>;\n\n        /// Create a directory.\n        ///\n        /// Note: This is similar to `mkdirat` in POSIX.\n        create-directory-at: func(\n            /// The relative path at which to create the directory.\n            path: string,\n        ) -> result<_, error-code>;\n\n        /// Return the attributes of an open file or directory.\n        ///\n        /// Note: This is similar to `fstat` in POSIX, except that it does not return\n        /// device and inode information. For testing whether two descriptors refer to\n        /// the same underlying filesystem object, use `is-same-object`. To obtain\n        /// additional data that can be used do determine whether a file has been\n        /// modified, use `metadata-hash`.\n        ///\n        /// Note: This was called `fd_filestat_get` in earlier versions of WASI.\n        stat: func() -> result<descriptor-stat, error-code>;\n\n        /// Return the attributes of a file or directory.\n        ///\n        /// Note: This is similar to `fstatat` in POSIX, except that it does not\n        /// return device and inode information. See the `stat` description for a\n        /// discussion of alternatives.\n        ///\n        /// Note: This was called `path_filestat_get` in earlier versions of WASI.\n        stat-at: func(\n            /// Flags determining the method of how the path is resolved.\n            path-flags: path-flags,\n            /// The relative path of the file or directory to inspect.\n            path: string,\n        ) -> result<descriptor-stat, error-code>;\n\n        /// Adjust the timestamps of a file or directory.\n        ///\n        /// Note: This is similar to `utimensat` in POSIX.\n        ///\n        /// Note: This was called `path_filestat_set_times` in earlier versions of\n        /// WASI.\n        set-times-at: func(\n            /// Flags determining the method of how the path is resolved.\n            path-flags: path-flags,\n            /// The relative path of the file or directory to operate on.\n            path: string,\n            /// The desired values of the data access timestamp.\n            data-access-timestamp: new-timestamp,\n            /// The desired values of the data modification timestamp.\n            data-modification-timestamp: new-timestamp,\n        ) -> result<_, error-code>;\n\n        /// Create a hard link.\n        ///\n        /// Note: This is similar to `linkat` in POSIX.\n        link-at: func(\n            /// Flags determining the method of how the path is resolved.\n            old-path-flags: path-flags,\n            /// The relative source path from which to link.\n            old-path: string,\n            /// The base directory for `new-path`.\n            new-descriptor: borrow<descriptor>,\n            /// The relative destination path at which to create the hard link.\n            new-path: string,\n        ) -> result<_, error-code>;\n\n        /// Open a file or directory.\n        ///\n        /// The returned descriptor is not guaranteed to be the lowest-numbered\n        /// descriptor not currently open/ it is randomized to prevent applications\n        /// from depending on making assumptions about indexes, since this is\n        /// error-prone in multi-threaded contexts. The returned descriptor is\n        /// guaranteed to be less than 2**31.\n        ///\n        /// If `flags` contains `descriptor-flags::mutate-directory`, and the base\n        /// descriptor doesn\'t have `descriptor-flags::mutate-directory` set,\n        /// `open-at` fails with `error-code::read-only`.\n        ///\n        /// If `flags` contains `write` or `mutate-directory`, or `open-flags`\n        /// contains `truncate` or `create`, and the base descriptor doesn\'t have\n        /// `descriptor-flags::mutate-directory` set, `open-at` fails with\n        /// `error-code::read-only`.\n        ///\n        /// Note: This is similar to `openat` in POSIX.\n        open-at: func(\n            /// Flags determining the method of how the path is resolved.\n            path-flags: path-flags,\n            /// The relative path of the object to open.\n            path: string,\n            /// The method by which to open the file.\n            open-flags: open-flags,\n            /// Flags to use for the resulting descriptor.\n            %flags: descriptor-flags,\n        ) -> result<descriptor, error-code>;\n\n        /// Read the contents of a symbolic link.\n        ///\n        /// If the contents contain an absolute or rooted path in the underlying\n        /// filesystem, this function fails with `error-code::not-permitted`.\n        ///\n        /// Note: This is similar to `readlinkat` in POSIX.\n        readlink-at: func(\n            /// The relative path of the symbolic link from which to read.\n            path: string,\n        ) -> result<string, error-code>;\n\n        /// Remove a directory.\n        ///\n        /// Return `error-code::not-empty` if the directory is not empty.\n        ///\n        /// Note: This is similar to `unlinkat(fd, path, AT_REMOVEDIR)` in POSIX.\n        remove-directory-at: func(\n            /// The relative path to a directory to remove.\n            path: string,\n        ) -> result<_, error-code>;\n\n        /// Rename a filesystem object.\n        ///\n        /// Note: This is similar to `renameat` in POSIX.\n        rename-at: func(\n            /// The relative source path of the file or directory to rename.\n            old-path: string,\n            /// The base directory for `new-path`.\n            new-descriptor: borrow<descriptor>,\n            /// The relative destination path to which to rename the file or directory.\n            new-path: string,\n        ) -> result<_, error-code>;\n\n        /// Create a symbolic link (also known as a \"symlink\").\n        ///\n        /// If `old-path` starts with `/`, the function fails with\n        /// `error-code::not-permitted`.\n        ///\n        /// Note: This is similar to `symlinkat` in POSIX.\n        symlink-at: func(\n            /// The contents of the symbolic link.\n            old-path: string,\n            /// The relative destination path at which to create the symbolic link.\n            new-path: string,\n        ) -> result<_, error-code>;\n\n        /// Unlink a filesystem object that is not a directory.\n        ///\n        /// Return `error-code::is-directory` if the path refers to a directory.\n        /// Note: This is similar to `unlinkat(fd, path, 0)` in POSIX.\n        unlink-file-at: func(\n            /// The relative path to a file to unlink.\n            path: string,\n        ) -> result<_, error-code>;\n\n        /// Test whether two descriptors refer to the same filesystem object.\n        ///\n        /// In POSIX, this corresponds to testing whether the two descriptors have the\n        /// same device (`st_dev`) and inode (`st_ino` or `d_ino`) numbers.\n        /// wasi-filesystem does not expose device and inode numbers, so this function\n        /// may be used instead.\n        is-same-object: func(other: borrow<descriptor>) -> bool;\n\n        /// Return a hash of the metadata associated with a filesystem object referred\n        /// to by a descriptor.\n        ///\n        /// This returns a hash of the last-modification timestamp and file size, and\n        /// may also include the inode number, device number, birth timestamp, and\n        /// other metadata fields that may change when the file is modified or\n        /// replaced. It may also include a secret value chosen by the\n        /// implementation and not otherwise exposed.\n        ///\n        /// Implementations are encourated to provide the following properties:\n        ///\n        ///  - If the file is not modified or replaced, the computed hash value should\n        ///    usually not change.\n        ///  - If the object is modified or replaced, the computed hash value should\n        ///    usually change.\n        ///  - The inputs to the hash should not be easily computable from the\n        ///    computed hash.\n        ///\n        /// However, none of these is required.\n        metadata-hash: func() -> result<metadata-hash-value, error-code>;\n\n        /// Return a hash of the metadata associated with a filesystem object referred\n        /// to by a directory descriptor and a relative path.\n        ///\n        /// This performs the same hash computation as `metadata-hash`.\n        metadata-hash-at: func(\n            /// Flags determining the method of how the path is resolved.\n            path-flags: path-flags,\n            /// The relative path of the file or directory to inspect.\n            path: string,\n        ) -> result<metadata-hash-value, error-code>;\n    }\n\n    /// A stream of directory entries.\n    resource directory-entry-stream {\n        /// Read a single directory entry from a `directory-entry-stream`.\n        read-directory-entry: func() -> result<option<directory-entry>, error-code>;\n    }\n\n    /// Attempts to extract a filesystem-related `error-code` from the stream\n    /// `error` provided.\n    ///\n    /// Stream operations which return `stream-error::last-operation-failed`\n    /// have a payload with more information about the operation that failed.\n    /// This payload can be passed through to this function to see if there\'s\n    /// filesystem-related information about the error to return.\n    ///\n    /// Note that this function is fallible because not all stream-related\n    /// errors are filesystem-related errors.\n    filesystem-error-code: func(err: borrow<error>) -> option<error-code>;\n}\n";
    const _: &str = "package wasi:random@0.2.0;\n\nworld imports {\n    import random;\n    import insecure;\n    import insecure-seed;\n}\n";
    const _: &str = "package wasi:random@0.2.0;\n/// WASI Random is a random data API.\n///\n/// It is intended to be portable at least between Unix-family platforms and\n/// Windows.\ninterface random {\n    /// Return `len` cryptographically-secure random or pseudo-random bytes.\n    ///\n    /// This function must produce data at least as cryptographically secure and\n    /// fast as an adequately seeded cryptographically-secure pseudo-random\n    /// number generator (CSPRNG). It must not block, from the perspective of\n    /// the calling program, under any circumstances, including on the first\n    /// request and on requests for numbers of bytes. The returned data must\n    /// always be unpredictable.\n    ///\n    /// This function must always return fresh data. Deterministic environments\n    /// must omit this function, rather than implementing it with deterministic\n    /// data.\n    get-random-bytes: func(len: u64) -> list<u8>;\n\n    /// Return a cryptographically-secure random or pseudo-random `u64` value.\n    ///\n    /// This function returns the same type of data as `get-random-bytes`,\n    /// represented as a `u64`.\n    get-random-u64: func() -> u64;\n}\n";
    const _: &str = "package wasi:random@0.2.0;\n/// The insecure interface for insecure pseudo-random numbers.\n///\n/// It is intended to be portable at least between Unix-family platforms and\n/// Windows.\ninterface insecure {\n    /// Return `len` insecure pseudo-random bytes.\n    ///\n    /// This function is not cryptographically secure. Do not use it for\n    /// anything related to security.\n    ///\n    /// There are no requirements on the values of the returned bytes, however\n    /// implementations are encouraged to return evenly distributed values with\n    /// a long period.\n    get-insecure-random-bytes: func(len: u64) -> list<u8>;\n\n    /// Return an insecure pseudo-random `u64` value.\n    ///\n    /// This function returns the same type of pseudo-random data as\n    /// `get-insecure-random-bytes`, represented as a `u64`.\n    get-insecure-random-u64: func() -> u64;\n}\n";
    const _: &str = "package wasi:random@0.2.0;\n/// The insecure-seed interface for seeding hash-map DoS resistance.\n///\n/// It is intended to be portable at least between Unix-family platforms and\n/// Windows.\ninterface insecure-seed {\n    /// Return a 128-bit value that may contain a pseudo-random value.\n    ///\n    /// The returned value is not required to be computed from a CSPRNG, and may\n    /// even be entirely deterministic. Host implementations are encouraged to\n    /// provide pseudo-random values to any program exposed to\n    /// attacker-controlled content, to enable DoS protection built into many\n    /// languages\' hash-map implementations.\n    ///\n    /// This function is intended to only be called once, by a source language\n    /// to initialize Denial Of Service (DoS) protection in its hash-map\n    /// implementation.\n    ///\n    /// # Expected future evolution\n    ///\n    /// This will likely be changed to a value import, to prevent it from being\n    /// called multiple times and potentially used for purposes other than DoS\n    /// protection.\n    insecure-seed: func() -> tuple<u64, u64>;\n}\n";
    const _: &str = "interface environment {\n  /// Get the POSIX-style environment variables.\n  ///\n  /// Each environment variable is provided as a pair of string variable names\n  /// and string value.\n  ///\n  /// Morally, these are a value import, but until value imports are available\n  /// in the component model, this import function should return the same\n  /// values each time it is called.\n  get-environment: func() -> list<tuple<string, string>>;\n\n  /// Get the POSIX-style arguments to the program.\n  get-arguments: func() -> list<string>;\n\n  /// Return a path that programs should use as their initial current working\n  /// directory, interpreting `.` as shorthand for this.\n  initial-cwd: func() -> option<string>;\n}\n";
    const _: &str = "package wasi:cli@0.2.0;\n\nworld imports {\n  include wasi:clocks/imports@0.2.0;\n  include wasi:filesystem/imports@0.2.0;\n  // include wasi:sockets/imports@0.2.0; // Sockets are not available in hermes\n  include wasi:random/imports@0.2.0;\n  include wasi:io/imports@0.2.0;\n\n  import environment;\n  //import exit;\n  import stdin;\n  import stdout;\n  import stderr;\n\n  // Terminal IO not supported in Hermes.\n  //import terminal-input;\n  //import terminal-output;\n  //import terminal-stdin;\n  //import terminal-stdout;\n  //import terminal-stderr;\n}\n";
    const _: &str = "interface stdin {\n  use wasi:io/streams@0.2.0.{input-stream};\n\n  get-stdin: func() -> input-stream;\n}\n\ninterface stdout {\n  use wasi:io/streams@0.2.0.{output-stream};\n\n  get-stdout: func() -> output-stream;\n}\n\ninterface stderr {\n  use wasi:io/streams@0.2.0.{output-stream};\n\n  get-stderr: func() -> output-stream;\n}\n";
    const _: &str = "/// This interface defines a handler of incoming HTTP Requests. It should\n/// be exported by components which can respond to HTTP Requests.\ninterface incoming-handler {\n  use types.{incoming-request, response-outparam};\n\n  /// This function is invoked with an incoming HTTP Request, and a resource\n  /// `response-outparam` which provides the capability to reply with an HTTP\n  /// Response. The response is sent by calling the `response-outparam.set`\n  /// method, which allows execution to continue after the response has been\n  /// sent. This enables both streaming to the response body, and performing other\n  /// work.\n  ///\n  /// The implementor of this function must write a response to the\n  /// `response-outparam` before returning, or else the caller will respond\n  /// with an error on its behalf.\n  handle: func(\n    request: incoming-request,\n    response-out: response-outparam\n  );\n}\n\n/// This interface defines a handler of outgoing HTTP Requests. It should be\n/// imported by components which wish to make HTTP Requests.\ninterface outgoing-handler {\n  use types.{\n    outgoing-request, request-options, future-incoming-response, error-code\n  };\n\n  /// This function is invoked with an outgoing HTTP Request, and it returns\n  /// a resource `future-incoming-response` which represents an HTTP Response\n  /// which may arrive in the future.\n  ///\n  /// The `options` argument accepts optional parameters for the HTTP\n  /// protocol\'s transport layer.\n  ///\n  /// This function may return an error if the `outgoing-request` is invalid\n  /// or not allowed to be made. Otherwise, protocol errors are reported\n  /// through the `future-incoming-response`.\n  handle: func(\n    request: outgoing-request,\n    options: option<request-options>\n  ) -> result<future-incoming-response, error-code>;\n}\n";
    const _: &str = "package wasi:http@0.2.0;\n\n/// The `wasi:http/proxy` world captures a widely-implementable intersection of\n/// hosts that includes HTTP forward and reverse proxies. Components targeting\n/// this world may concurrently stream in and out any number of incoming and\n/// outgoing HTTP requests.\nworld proxy {\n  /// HTTP proxies have access to time and randomness.\n  include wasi:clocks/imports@0.2.0;\n  import wasi:random/random@0.2.0;\n\n  /// Proxies have standard output and error streams which are expected to\n  /// terminate in a developer-facing console provided by the host.\n  import wasi:cli/stdout@0.2.0;\n  import wasi:cli/stderr@0.2.0;\n\n  /// TODO: this is a temporary workaround until component tooling is able to\n  /// gracefully handle the absence of stdin. Hosts must return an eof stream\n  /// for this import, which is what wasi-libc + tooling will do automatically\n  /// when this import is properly removed.\n  import wasi:cli/stdin@0.2.0;\n\n  /// This is the default handler to use when user code simply wants to make an\n  /// HTTP request (e.g., via `fetch()`).\n  import outgoing-handler;\n\n  /// The host delivers incoming HTTP requests to a component by calling the\n  /// `handle` function of this exported interface. A host may arbitrarily reuse\n  /// or not reuse component instance when delivering incoming HTTP requests and\n  /// thus a component must be able to handle 0..N calls to `handle`.\n  export incoming-handler;\n}\n";
    const _: &str = "/// This interface defines all of the types and methods for implementing\n/// HTTP Requests and Responses, both incoming and outgoing, as well as\n/// their headers, trailers, and bodies.\ninterface types {\n  use wasi:clocks/monotonic-clock@0.2.0.{duration};\n  use wasi:io/streams@0.2.0.{input-stream, output-stream};\n  use wasi:io/error@0.2.0.{error as io-error};\n  \n  // Hermes doews not support `poll`\n  //use wasi:io/poll@0.2.0.{pollable};\n\n  /// This type corresponds to HTTP standard Methods.\n  variant method {\n    get,\n    head,\n    post,\n    put,\n    delete,\n    connect,\n    options,\n    trace,\n    patch,\n    other(string)\n  }\n\n  /// This type corresponds to HTTP standard Related Schemes.\n  variant scheme {\n    HTTP,\n    HTTPS,\n    other(string)\n  }\n\n  /// These cases are inspired by the IANA HTTP Proxy Error Types:\n  ///   https://www.iana.org/assignments/http-proxy-status/http-proxy-status.xhtml#table-http-proxy-error-types\n  variant error-code {\n    DNS-timeout,\n    DNS-error(DNS-error-payload),\n    destination-not-found,\n    destination-unavailable,\n    destination-IP-prohibited,\n    destination-IP-unroutable,\n    connection-refused,\n    connection-terminated,\n    connection-timeout,\n    connection-read-timeout,\n    connection-write-timeout,\n    connection-limit-reached,\n    TLS-protocol-error,\n    TLS-certificate-error,\n    TLS-alert-received(TLS-alert-received-payload),\n    HTTP-request-denied,\n    HTTP-request-length-required,\n    HTTP-request-body-size(option<u64>),\n    HTTP-request-method-invalid,\n    HTTP-request-URI-invalid,\n    HTTP-request-URI-too-long,\n    HTTP-request-header-section-size(option<u32>),\n    HTTP-request-header-size(option<field-size-payload>),\n    HTTP-request-trailer-section-size(option<u32>),\n    HTTP-request-trailer-size(field-size-payload),\n    HTTP-response-incomplete,\n    HTTP-response-header-section-size(option<u32>),\n    HTTP-response-header-size(field-size-payload),\n    HTTP-response-body-size(option<u64>),\n    HTTP-response-trailer-section-size(option<u32>),\n    HTTP-response-trailer-size(field-size-payload),\n    HTTP-response-transfer-coding(option<string>),\n    HTTP-response-content-coding(option<string>),\n    HTTP-response-timeout,\n    HTTP-upgrade-failed,\n    HTTP-protocol-error,\n    loop-detected,\n    configuration-error,\n    /// This is a catch-all error for anything that doesn\'t fit cleanly into a\n    /// more specific case. It also includes an optional string for an\n    /// unstructured description of the error. Users should not depend on the\n    /// string for diagnosing errors, as it\'s not required to be consistent\n    /// between implementations.\n    internal-error(option<string>)\n  }\n\n  /// Defines the case payload type for `DNS-error` above:\n  record DNS-error-payload {\n    rcode: option<string>,\n    info-code: option<u16>\n  }\n\n  /// Defines the case payload type for `TLS-alert-received` above:\n  record TLS-alert-received-payload {\n    alert-id: option<u8>,\n    alert-message: option<string>\n  }\n\n  /// Defines the case payload type for `HTTP-response-{header,trailer}-size` above:\n  record field-size-payload {\n    field-name: option<string>,\n    field-size: option<u32>\n  }\n\n  /// Attempts to extract a http-related `error` from the wasi:io `error`\n  /// provided.\n  ///\n  /// Stream operations which return\n  /// `wasi:io/stream/stream-error::last-operation-failed` have a payload of\n  /// type `wasi:io/error/error` with more information about the operation\n  /// that failed. This payload can be passed through to this function to see\n  /// if there\'s http-related information about the error to return.\n  ///\n  /// Note that this function is fallible because not all io-errors are\n  /// http-related errors.\n  http-error-code: func(err: borrow<io-error>) -> option<error-code>;\n\n  /// This type enumerates the different kinds of errors that may occur when\n  /// setting or appending to a `fields` resource.\n  variant header-error {\n    /// This error indicates that a `field-key` or `field-value` was\n    /// syntactically invalid when used with an operation that sets headers in a\n    /// `fields`.\n    invalid-syntax,\n\n    /// This error indicates that a forbidden `field-key` was used when trying\n    /// to set a header in a `fields`.\n    forbidden,\n\n    /// This error indicates that the operation on the `fields` was not\n    /// permitted because the fields are immutable.\n    immutable,\n  }\n\n  /// Field keys are always strings.\n  type field-key = string;\n\n  /// Field values should always be ASCII strings. However, in\n  /// reality, HTTP implementations often have to interpret malformed values,\n  /// so they are provided as a list of bytes.\n  type field-value = list<u8>;\n\n  /// This following block defines the `fields` resource which corresponds to\n  /// HTTP standard Fields. Fields are a common representation used for both\n  /// Headers and Trailers.\n  ///\n  /// A `fields` may be mutable or immutable. A `fields` created using the\n  /// constructor, `from-list`, or `clone` will be mutable, but a `fields`\n  /// resource given by other means (including, but not limited to,\n  /// `incoming-request.headers`, `outgoing-request.headers`) might be be\n  /// immutable. In an immutable fields, the `set`, `append`, and `delete`\n  /// operations will fail with `header-error.immutable`.\n  resource fields {\n\n    /// Construct an empty HTTP Fields.\n    ///\n    /// The resulting `fields` is mutable.\n    constructor();\n\n    /// Construct an HTTP Fields.\n    ///\n    /// The resulting `fields` is mutable.\n    ///\n    /// The list represents each key-value pair in the Fields. Keys\n    /// which have multiple values are represented by multiple entries in this\n    /// list with the same key.\n    ///\n    /// The tuple is a pair of the field key, represented as a string, and\n    /// Value, represented as a list of bytes. In a valid Fields, all keys\n    /// and values are valid UTF-8 strings. However, values are not always\n    /// well-formed, so they are represented as a raw list of bytes.\n    ///\n    /// An error result will be returned if any header or value was\n    /// syntactically invalid, or if a header was forbidden.\n    from-list: static func(\n      entries: list<tuple<field-key,field-value>>\n    ) -> result<fields, header-error>;\n\n    /// Get all of the values corresponding to a key. If the key is not present\n    /// in this `fields`, an empty list is returned. However, if the key is\n    /// present but empty, this is represented by a list with one or more\n    /// empty field-values present.\n    get: func(name: field-key) -> list<field-value>;\n\n    /// Returns `true` when the key is present in this `fields`. If the key is\n    /// syntactically invalid, `false` is returned.\n    has: func(name: field-key) -> bool;\n\n    /// Set all of the values for a key. Clears any existing values for that\n    /// key, if they have been set.\n    ///\n    /// Fails with `header-error.immutable` if the `fields` are immutable.\n    set: func(name: field-key, value: list<field-value>) -> result<_, header-error>;\n\n    /// Delete all values for a key. Does nothing if no values for the key\n    /// exist.\n    ///\n    /// Fails with `header-error.immutable` if the `fields` are immutable.\n    delete: func(name: field-key) -> result<_, header-error>;\n\n    /// Append a value for a key. Does not change or delete any existing\n    /// values for that key.\n    ///\n    /// Fails with `header-error.immutable` if the `fields` are immutable.\n    append: func(name: field-key, value: field-value) -> result<_, header-error>;\n\n    /// Retrieve the full set of keys and values in the Fields. Like the\n    /// constructor, the list represents each key-value pair.\n    ///\n    /// The outer list represents each key-value pair in the Fields. Keys\n    /// which have multiple values are represented by multiple entries in this\n    /// list with the same key.\n    entries: func() -> list<tuple<field-key,field-value>>;\n\n    /// Make a deep copy of the Fields. Equivelant in behavior to calling the\n    /// `fields` constructor on the return value of `entries`. The resulting\n    /// `fields` is mutable.\n    clone: func() -> fields;\n  }\n\n  /// Headers is an alias for Fields.\n  type headers = fields;\n\n  /// Trailers is an alias for Fields.\n  type trailers = fields;\n\n  /// Represents an incoming HTTP Request.\n  resource incoming-request {\n\n    /// Returns the method of the incoming request.\n    method: func() -> method;\n\n    /// Returns the path with query parameters from the request, as a string.\n    path-with-query: func() -> option<string>;\n\n    /// Returns the protocol scheme from the request.\n    scheme: func() -> option<scheme>;\n\n    /// Returns the authority from the request, if it was present.\n    authority: func() -> option<string>;\n\n    /// Get the `headers` associated with the request.\n    ///\n    /// The returned `headers` resource is immutable: `set`, `append`, and\n    /// `delete` operations will fail with `header-error.immutable`.\n    ///\n    /// The `headers` returned are a child resource: it must be dropped before\n    /// the parent `incoming-request` is dropped. Dropping this\n    /// `incoming-request` before all children are dropped will trap.\n    headers: func() -> headers;\n\n    /// Gives the `incoming-body` associated with this request. Will only\n    /// return success at most once, and subsequent calls will return error.\n    consume: func() -> result<incoming-body>;\n  }\n\n  /// Represents an outgoing HTTP Request.\n  resource outgoing-request {\n\n    /// Construct a new `outgoing-request` with a default `method` of `GET`, and\n    /// `none` values for `path-with-query`, `scheme`, and `authority`.\n    ///\n    /// * `headers` is the HTTP Headers for the Request.\n    ///\n    /// It is possible to construct, or manipulate with the accessor functions\n    /// below, an `outgoing-request` with an invalid combination of `scheme`\n    /// and `authority`, or `headers` which are not permitted to be sent.\n    /// It is the obligation of the `outgoing-handler.handle` implementation\n    /// to reject invalid constructions of `outgoing-request`.\n    constructor(\n      headers: headers\n    );\n\n    /// Returns the resource corresponding to the outgoing Body for this\n    /// Request.\n    ///\n    /// Returns success on the first call: the `outgoing-body` resource for\n    /// this `outgoing-request` can be retrieved at most once. Subsequent\n    /// calls will return error.\n    body: func() -> result<outgoing-body>;\n\n    /// Get the Method for the Request.\n    method: func() -> method;\n    /// Set the Method for the Request. Fails if the string present in a\n    /// `method.other` argument is not a syntactically valid method.\n    set-method: func(method: method) -> result;\n\n    /// Get the combination of the HTTP Path and Query for the Request.\n    /// When `none`, this represents an empty Path and empty Query.\n    path-with-query: func() -> option<string>;\n    /// Set the combination of the HTTP Path and Query for the Request.\n    /// When `none`, this represents an empty Path and empty Query. Fails is the\n    /// string given is not a syntactically valid path and query uri component.\n    set-path-with-query: func(path-with-query: option<string>) -> result;\n\n    /// Get the HTTP Related Scheme for the Request. When `none`, the\n    /// implementation may choose an appropriate default scheme.\n    scheme: func() -> option<scheme>;\n    /// Set the HTTP Related Scheme for the Request. When `none`, the\n    /// implementation may choose an appropriate default scheme. Fails if the\n    /// string given is not a syntactically valid uri scheme.\n    set-scheme: func(scheme: option<scheme>) -> result;\n\n    /// Get the HTTP Authority for the Request. A value of `none` may be used\n    /// with Related Schemes which do not require an Authority. The HTTP and\n    /// HTTPS schemes always require an authority.\n    authority: func() -> option<string>;\n    /// Set the HTTP Authority for the Request. A value of `none` may be used\n    /// with Related Schemes which do not require an Authority. The HTTP and\n    /// HTTPS schemes always require an authority. Fails if the string given is\n    /// not a syntactically valid uri authority.\n    set-authority: func(authority: option<string>) -> result;\n\n    /// Get the headers associated with the Request.\n    ///\n    /// The returned `headers` resource is immutable: `set`, `append`, and\n    /// `delete` operations will fail with `header-error.immutable`.\n    ///\n    /// This headers resource is a child: it must be dropped before the parent\n    /// `outgoing-request` is dropped, or its ownership is transfered to\n    /// another component by e.g. `outgoing-handler.handle`.\n    headers: func() -> headers;\n  }\n\n  /// Parameters for making an HTTP Request. Each of these parameters is\n  /// currently an optional timeout applicable to the transport layer of the\n  /// HTTP protocol.\n  ///\n  /// These timeouts are separate from any the user may use to bound a\n  /// blocking call to `wasi:io/poll.poll`.\n  resource request-options {\n    /// Construct a default `request-options` value.\n    constructor();\n\n    /// The timeout for the initial connect to the HTTP Server.\n    connect-timeout: func() -> option<duration>;\n\n    /// Set the timeout for the initial connect to the HTTP Server. An error\n    /// return value indicates that this timeout is not supported.\n    set-connect-timeout: func(duration: option<duration>) -> result;\n\n    /// The timeout for receiving the first byte of the Response body.\n    first-byte-timeout: func() -> option<duration>;\n\n    /// Set the timeout for receiving the first byte of the Response body. An\n    /// error return value indicates that this timeout is not supported.\n    set-first-byte-timeout: func(duration: option<duration>) -> result;\n\n    /// The timeout for receiving subsequent chunks of bytes in the Response\n    /// body stream.\n    between-bytes-timeout: func() -> option<duration>;\n\n    /// Set the timeout for receiving subsequent chunks of bytes in the Response\n    /// body stream. An error return value indicates that this timeout is not\n    /// supported.\n    set-between-bytes-timeout: func(duration: option<duration>) -> result;\n  }\n\n  /// Represents the ability to send an HTTP Response.\n  ///\n  /// This resource is used by the `wasi:http/incoming-handler` interface to\n  /// allow a Response to be sent corresponding to the Request provided as the\n  /// other argument to `incoming-handler.handle`.\n  resource response-outparam {\n\n    /// Set the value of the `response-outparam` to either send a response,\n    /// or indicate an error.\n    ///\n    /// This method consumes the `response-outparam` to ensure that it is\n    /// called at most once. If it is never called, the implementation\n    /// will respond with an error.\n    ///\n    /// The user may provide an `error` to `response` to allow the\n    /// implementation determine how to respond with an HTTP error response.\n    set: static func(\n      param: response-outparam,\n      response: result<outgoing-response, error-code>,\n    );\n  }\n\n  /// This type corresponds to the HTTP standard Status Code.\n  type status-code = u16;\n\n  /// Represents an incoming HTTP Response.\n  resource incoming-response {\n\n    /// Returns the status code from the incoming response.\n    status: func() -> status-code;\n\n    /// Returns the headers from the incoming response.\n    ///\n    /// The returned `headers` resource is immutable: `set`, `append`, and\n    /// `delete` operations will fail with `header-error.immutable`.\n    ///\n    /// This headers resource is a child: it must be dropped before the parent\n    /// `incoming-response` is dropped.\n    headers: func() -> headers;\n\n    /// Returns the incoming body. May be called at most once. Returns error\n    /// if called additional times.\n    consume: func() -> result<incoming-body>;\n  }\n\n  /// Represents an incoming HTTP Request or Response\'s Body.\n  ///\n  /// A body has both its contents - a stream of bytes - and a (possibly\n  /// empty) set of trailers, indicating that the full contents of the\n  /// body have been received. This resource represents the contents as\n  /// an `input-stream` and the delivery of trailers as a `future-trailers`,\n  /// and ensures that the user of this interface may only be consuming either\n  /// the body contents or waiting on trailers at any given time.\n  resource incoming-body {\n\n    /// Returns the contents of the body, as a stream of bytes.\n    ///\n    /// Returns success on first call: the stream representing the contents\n    /// can be retrieved at most once. Subsequent calls will return error.\n    ///\n    /// The returned `input-stream` resource is a child: it must be dropped\n    /// before the parent `incoming-body` is dropped, or consumed by\n    /// `incoming-body.finish`.\n    ///\n    /// This invariant ensures that the implementation can determine whether\n    /// the user is consuming the contents of the body, waiting on the\n    /// `future-trailers` to be ready, or neither. This allows for network\n    /// backpressure is to be applied when the user is consuming the body,\n    /// and for that backpressure to not inhibit delivery of the trailers if\n    /// the user does not read the entire body.\n    %stream: func() -> result<input-stream>;\n\n    /// Takes ownership of `incoming-body`, and returns a `future-trailers`.\n    /// This function will trap if the `input-stream` child is still alive.\n    finish: static func(this: incoming-body) -> future-trailers;\n  }\n\n  /// Represents a future which may eventaully return trailers, or an error.\n  ///\n  /// In the case that the incoming HTTP Request or Response did not have any\n  /// trailers, this future will resolve to the empty set of trailers once the\n  /// complete Request or Response body has been received.\n  resource future-trailers {\n\n    /// Returns a pollable which becomes ready when either the trailers have\n    /// been received, or an error has occured. When this pollable is ready,\n    /// the `get` method will return `some`.\n    //subscribe: func() -> pollable; // Hermes does NOT support `poll`\n\n    /// Returns the contents of the trailers, or an error which occured,\n    /// once the future is ready.\n    ///\n    /// The outer `option` represents future readiness. Users can wait on this\n    /// `option` to become `some` using the `subscribe` method.\n    ///\n    /// The outer `result` is used to retrieve the trailers or error at most\n    /// once. It will be success on the first call in which the outer option\n    /// is `some`, and error on subsequent calls.\n    ///\n    /// The inner `result` represents that either the HTTP Request or Response\n    /// body, as well as any trailers, were received successfully, or that an\n    /// error occured receiving them. The optional `trailers` indicates whether\n    /// or not trailers were present in the body.\n    ///\n    /// When some `trailers` are returned by this method, the `trailers`\n    /// resource is immutable, and a child. Use of the `set`, `append`, or\n    /// `delete` methods will return an error, and the resource must be\n    /// dropped before the parent `future-trailers` is dropped.\n    get: func() -> option<result<result<option<trailers>, error-code>>>;\n  }\n\n  /// Represents an outgoing HTTP Response.\n  resource outgoing-response {\n\n    /// Construct an `outgoing-response`, with a default `status-code` of `200`.\n    /// If a different `status-code` is needed, it must be set via the\n    /// `set-status-code` method.\n    ///\n    /// * `headers` is the HTTP Headers for the Response.\n    constructor(headers: headers);\n\n    /// Get the HTTP Status Code for the Response.\n    status-code: func() -> status-code;\n\n    /// Set the HTTP Status Code for the Response. Fails if the status-code\n    /// given is not a valid http status code.\n    set-status-code: func(status-code: status-code) -> result;\n\n    /// Get the headers associated with the Request.\n    ///\n    /// The returned `headers` resource is immutable: `set`, `append`, and\n    /// `delete` operations will fail with `header-error.immutable`.\n    ///\n    /// This headers resource is a child: it must be dropped before the parent\n    /// `outgoing-request` is dropped, or its ownership is transfered to\n    /// another component by e.g. `outgoing-handler.handle`.\n    headers: func() -> headers;\n\n    /// Returns the resource corresponding to the outgoing Body for this Response.\n    ///\n    /// Returns success on the first call: the `outgoing-body` resource for\n    /// this `outgoing-response` can be retrieved at most once. Subsequent\n    /// calls will return error.\n    body: func() -> result<outgoing-body>;\n  }\n\n  /// Represents an outgoing HTTP Request or Response\'s Body.\n  ///\n  /// A body has both its contents - a stream of bytes - and a (possibly\n  /// empty) set of trailers, inducating the full contents of the body\n  /// have been sent. This resource represents the contents as an\n  /// `output-stream` child resource, and the completion of the body (with\n  /// optional trailers) with a static function that consumes the\n  /// `outgoing-body` resource, and ensures that the user of this interface\n  /// may not write to the body contents after the body has been finished.\n  ///\n  /// If the user code drops this resource, as opposed to calling the static\n  /// method `finish`, the implementation should treat the body as incomplete,\n  /// and that an error has occured. The implementation should propogate this\n  /// error to the HTTP protocol by whatever means it has available,\n  /// including: corrupting the body on the wire, aborting the associated\n  /// Request, or sending a late status code for the Response.\n  resource outgoing-body {\n\n    /// Returns a stream for writing the body contents.\n    ///\n    /// The returned `output-stream` is a child resource: it must be dropped\n    /// before the parent `outgoing-body` resource is dropped (or finished),\n    /// otherwise the `outgoing-body` drop or `finish` will trap.\n    ///\n    /// Returns success on the first call: the `output-stream` resource for\n    /// this `outgoing-body` may be retrieved at most once. Subsequent calls\n    /// will return error.\n    write: func() -> result<output-stream>;\n\n    /// Finalize an outgoing body, optionally providing trailers. This must be\n    /// called to signal that the response is complete. If the `outgoing-body`\n    /// is dropped without calling `outgoing-body.finalize`, the implementation\n    /// should treat the body as corrupted.\n    ///\n    /// Fails if the body\'s `outgoing-request` or `outgoing-response` was\n    /// constructed with a Content-Length header, and the contents written\n    /// to the body (via `write`) does not match the value given in the\n    /// Content-Length.\n    finish: static func(\n      this: outgoing-body,\n      trailers: option<trailers>\n    ) -> result<_, error-code>;\n  }\n\n  /// Represents a future which may eventaully return an incoming HTTP\n  /// Response, or an error.\n  ///\n  /// This resource is returned by the `wasi:http/outgoing-handler` interface to\n  /// provide the HTTP Response corresponding to the sent Request.\n  resource future-incoming-response {\n    /*\n    /// Returns a pollable which becomes ready when either the Response has\n    /// been received, or an error has occured. When this pollable is ready,\n    /// the `get` method will return `some`.\n    subscribe: func() -> pollable;\n    */ \n    \n    /// Returns the incoming HTTP Response, or an error, once one is ready.\n    ///\n    /// The outer `option` represents future readiness. Users can wait on this\n    /// `option` to become `some` using the `subscribe` method.\n    ///\n    /// The outer `result` is used to retrieve the response or error at most\n    /// once. It will be success on the first call in which the outer option\n    /// is `some`, and error on subsequent calls.\n    ///\n    /// The inner `result` represents that either the incoming HTTP Response\n    /// status and headers have recieved successfully, or that an error\n    /// occured. Errors may also occur while consuming the response body,\n    /// but those will be reported by the `incoming-body` and its\n    /// `output-stream` child.\n    get: func() -> option<result<result<incoming-response, error-code>>>;\n\n  }\n}\n";
    const _: &str = "package hermes:wasi;\n\n/// This import every single API and exports every single entrypoint for a module.\n/// Modules ONLY need to import API\'s they actually use.\n/// Modules only need to implement the exports they require.\n/// Take note of any permissions attached to a particular API before using it.\nworld hermes {\n\n  /// All possible WASI compatible Imports/Exports\n  include wasi:cli/imports@0.2.0;\n  include wasi:http/proxy@0.2.0;\n\n  /// All possible Hermes Imports/Exports\n  include hermes:binary/all;\n  include hermes:cardano/all;\n  include hermes:cbor/all;\n  include hermes:cron/all;\n  include hermes:crypto/all;\n  include hermes:hash/all;\n  include hermes:init/all;\n  include hermes:json/all;\n  include hermes:kv-store/all;\n  include hermes:localtime/all;\n  include hermes:logging/all;\n}\n";
}
