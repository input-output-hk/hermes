VERSION 0.8

IMPORT github.com/input-output-hk/catalyst-ci/earthly/rust:feat/faster-rust-tool-install AS rust-ci
# Use when debugging cat-ci locally.
# IMPORT ../../catalyst-ci/earthly/rust AS rust-ci

IMPORT ../wasm AS wasm
IMPORT ../wasm/stub-module AS stub-module

# builder : Set up our target toolchains, and copy our files.
builder:
    DO rust-ci+SETUP
    COPY --dir .cargo .config crates bin schemas .
    COPY Cargo.toml .
    COPY clippy.toml deny.toml rustfmt.toml .

    RUN mkdir /wasm
    COPY --dir wasm+wasi-src/wasi /wasm/wasi

# benchmark-builder : Builder that includes built WASM Modules for benchmarks to run against.
benchmark-builder:
    FROM +builder

    # Compiled WASM component for benchmarks - Should not be in the base builder.
    COPY stub-module+build/stub.wasm /wasm/stub-module/stub.wasm

# bindings-expand : Expands `wasmtime::bindgen!` macro into the `bindings.rs` file
bindings-expand:
    FROM +builder

    # Do not use the cached builder as it can not do re-direction of output to a file.
    # This command also is only used for local development/debugging and not run in CI.
    RUN cargo expand -p hermes --lib runtime_extensions::bindings > bindings.rs

    SAVE ARTIFACT bindings.rs AS LOCAL bindings.rs

## -----------------------------------------------------------------------------
##
## Standard CI targets.
##
## These targets are discovered and executed automatically by CI.

# check : Run check using the most efficient host tooling
# CI Automated Entry point.
check:
    FROM +builder

    DO rust-ci+EXECUTE --cmd="/scripts/std_checks.py"

# all-hosts-check : Test which runs check with all supported host tooling.  
# Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-check:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +check

# build : Run build using the most efficient host tooling
# CI Automated Entry point.
build:
    FROM +benchmark-builder

    # Directory where WASM test components go when we run wasm module integration tests.
    RUN mkdir ../wasm/test-components

    DO rust-ci+EXECUTE \
        --cmd="/scripts/std_build.py" \
        --args1="--bench_flags=\"--features bench\"" \
        --args2="--libs=cardano-chain-follower" \
        --args3="--bins=hermes/hermes" \
        --output="release/hermes" \
        --docs="true"

    DO rust-ci+COPY_OUTPUT --output="criterion/.*"

    SAVE ARTIFACT target/doc doc
    SAVE ARTIFACT target/release/hermes hermes
    SAVE ARTIFACT target/criterion

# test-wasm-integration : Run WASM integration tests on hermes engine.
test-wasm-integration:
    FROM +build

    # Copy all wasm module artifacts for testing
    COPY ../wasm/integration-test/cron+build/cron.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/clocks+build/clocks.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/crypto+build/crypto.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/cardano+build/cardano.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/hashing+build/hashing.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/ipfs+build/ipfs.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/localtime+build/localtime.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/logger+build/logger.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/sqlite+build/sqlite.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/smoke-test+build/smoke-test.wasm ../wasm/test-components/

    # List all WASM integration tests/benches and also run them.
    RUN cargo test --release --test wasm-component-integration-tests -- --list
    RUN cargo test --release --test wasm-component-integration-tests -- --test
    RUN cargo test --release --test wasm-component-integration-tests -- --bench

# test-download-chain - Test on downloading a mithril snapshot from the preprod chain without syncing.
test-download-mithril-snapshot:
    FROM +build

    RUN apt update && apt install -y time m4

    RUN cargo build -r --package cardano-chain-follower --example follow_chains --features mimalloc
    RUN RUST_LOG="error,follow_chains=debug,cardano_chain_follower=debug,mithril-client=debug" \
        time -f "\nReal Time: %E\nUser Time: %U\nSystem Time: %S" \
        ./target/release/examples/follow_chains \
        --preprod --stop-at-tip --halt-on-error \
        && echo "Mithril Snapshot download succeeded."

# all-hosts-build : Test which runs check with all supported host tooling.  
# Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-build:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +build

## -----------------------------------------------------------------------------

# local-ci-run: This step simulates the full CI run for local purposes only.
local-ci-run:
    BUILD +check
    BUILD +build
    #BUILD +package
    #BUILD +integrate
    #BUILD +publish

# json-schemas - Artifact so we can use the Hermes json schemas in other parts of the build.
json-schemas:
    FROM scratch

    WORKDIR /
    COPY --dir schemas .

    SAVE ARTIFACT schemas schemas

show-build-dependency-tree:
    LOCALLY
    RUN cargo tree -e normal,build -f "{p}[{f}]" 