VERSION 0.8

IMPORT github.com/input-output-hk/catalyst-ci/earthly/rust:v3.5.17 AS rust-ci

# Use when debugging cat-ci locally.
# IMPORT ../../catalyst-ci/earthly/rust AS rust-ci

IMPORT ../wasm AS wasm
IMPORT ../wasm/stub-module AS stub-module

# builder : Set up our target toolchains, and copy our files.
builder:
    DO rust-ci+SETUP
    COPY --dir .cargo .config bin schemas .
    COPY Cargo.toml .
    COPY clippy.toml deny.toml rustfmt.toml .

    RUN mkdir /wasm
    COPY --dir wasm+wasi-src/wasi /wasm/wasi
    # Compiled WASM component for benchmarks
    COPY stub-module+build/stub.wasm /wasm/stub-module/stub.wasm

# sync-cfg: Synchronize local config with CI version.
# Must be run by the developer manually.
sync-cfg:
    FROM +builder
    DO rust-ci+SYNC_STD_CFG

# bindings-expand : Expands `wasmtime::bindgen!` macro into the `bindings.rs` file
bindings-expand:
    FROM +builder

    # Do not use the cached builder as it can not do re-direction of output to a file.
    # This command also is only used for local development/debugging and not run in CI.
    RUN cargo expand -p hermes --lib runtime_extensions::bindings > bindings.rs

    SAVE ARTIFACT bindings.rs AS LOCAL bindings.rs

## -----------------------------------------------------------------------------
##
## Standard CI targets.
##
## These targets are discovered and executed automatically by CI.

# check : Run check using the most efficient host tooling
# CI Automated Entry point.
check:
    FROM +builder

    DO rust-ci+EXECUTE --cmd="/scripts/std_checks.py"

# all-hosts-check : Test which runs check with all supported host tooling.
# Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-check:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +check

# build : Run build using the most efficient host tooling
# CI Automated Entry point.
build:
    FROM +builder

    # Directory where WASM test components go when we run wasm module integration tests.
    RUN mkdir ../wasm/test-components
    # Directory where WASM components go to be run as applications.
    RUN mkdir ../wasm/app-components

    DO rust-ci+EXECUTE \
        --cmd="/scripts/std_build.py" \
        --args1="--bench_flags=\"--features bench\"" \
        --args2="--bins=hermes/hermes" \
        --output="release/hermes" \
        --docs="true"

    DO rust-ci+COPY_OUTPUT --output="criterion/.*"

    SAVE ARTIFACT target/doc doc
    SAVE ARTIFACT target/release/hermes hermes
    SAVE ARTIFACT target/criterion

# test-wasm-integration : Run WASM integration tests on hermes engine.
test-wasm-integration:
    FROM +build

    # Copy all wasm module artifacts for testing

    COPY ../wasm/integration-test/cardano+build/cardano.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/clocks+build/clocks.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/cron+build/cron.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/crypto+build/crypto.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/golang+build/golang.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/hashing+build/hashing.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/ipfs+build/ipfs.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/localtime+build/localtime.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/logger+build/logger.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/sqlite+build/sqlite.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/smoke-test+build/smoke_test.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/wasi-filesystem+build/wasi_filesystem.wasm ../wasm/test-components/

    # List all WASM integration tests/benches and also run them.
    RUN cargo test --release --test wasm-component-integration-tests -- --list
    RUN cargo test --release --test wasm-component-integration-tests -- --test
    RUN cargo test --release --test wasm-component-integration-tests -- --bench

# test-wasm-examples : Run WASM integration examples on hermes engine.
test-wasm-examples:
    FROM +build

    COPY +build/hermes hermes

    # Copy all wasm module artifacts for running as Hermes applications

    COPY ../wasm/examples/c/cardano_age+build/cardano_age_c.wasm ../wasm/app-components/
    COPY ../wasm/examples/c/next_century+build/next_century_c.wasm ../wasm/app-components/
    COPY ../wasm/examples/rust/cardano_age+build/cardano_age_rs.wasm ../wasm/app-components/
    COPY ../wasm/examples/rust/next_century+build/next_century_rs.wasm ../wasm/app-components/
    # COPY ../wasm/examples/rust/cardano+build/cardano_rs.wasm ../wasm/app-components/

    RUN ./hermes playground ../wasm/app-components/cardano_age_c.wasm --timeout-ms 10000; \
        test $? -eq 0
    RUN ./hermes playground ../wasm/app-components/next_century_c.wasm --timeout-ms 10000; \
        test $? -eq 1
    RUN ./hermes playground ../wasm/app-components/cardano_age_rs.wasm --timeout-ms 10000; \
        test $? -eq 0
    RUN ./hermes playground ../wasm/app-components/next_century_rs.wasm --timeout-ms 10000; \
        test $? -eq 1
    # Example of how to run the Cardano module test
    # Comment out because this is a long running test
    # RUN ./hermes playground ../wasm/app-components/cardano.rs.wasm --timeout-ms 10000;

# all-hosts-build : Test which runs check with all supported host tooling.
# Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-build:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +build

## -----------------------------------------------------------------------------

# local-ci-run: This step simulates the full CI run for local purposes only.
local-ci-run:
    BUILD +check
    BUILD +build
    #BUILD +package
    #BUILD +integrate
    #BUILD +publish

# json-schemas - Artifact so we can use the Hermes json schemas in other parts of the build.
json-schemas:
    FROM scratch

    WORKDIR /
    COPY --dir schemas .

    SAVE ARTIFACT schemas schemas

