VERSION 0.7

#cspell: words rustfmt

# Set up our target toolchains, and copy our files.
builder:
    DO github.com/input-output-hk/catalyst-ci/earthly/rust:v2.11.2+SETUP
    COPY --dir .cargo .config crates bin .
    COPY Cargo.toml .
    COPY clippy.toml deny.toml rustfmt.toml .

    RUN mkdir /wasm
    COPY --dir ../wasm+wasi-src/wasi /wasm/wasi
    # Compiled WASM component for benchmarks
    COPY ../wasm/stub-module+build/stub.wasm /wasm/stub-module/stub.wasm

# Expands `wasmtime::bindgen!` macro into the `bindings.rs` file
bindings-expand:
    FROM +builder

    RUN cargo expand -p hermes --lib runtime_extensions::bindings > bindings.rs
    SAVE ARTIFACT bindings.rs AS LOCAL bindings.rs

## -----------------------------------------------------------------------------
##
## Standard CI targets.
##
## These targets are discovered and executed automatically by CI.

# Run check using the most efficient host tooling
# CI Automated Entry point.
check:
    FROM +builder

    RUN /scripts/std_checks.py

# Test which runs check with all supported host tooling.  Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-check:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +check

# Run build using the most efficient host tooling
# CI Automated Entry point.
build:
    FROM +builder

    # Directory where WASM test components go when we run wasm module integration tests.
    RUN mkdir ../wasm/test-components

    RUN /scripts/std_build.py   --bench_flags="--features bench" \
                                --libs="cardano-chain-follower" \
                                --bins="hermes/hermes" \
                                --verbose

    SAVE ARTIFACT target/$TARGETARCH/doc doc
    SAVE ARTIFACT target/$TARGETARCH/release/hermes hermes
    SAVE ARTIFACT target/criterion

test-wasm-integration:
    FROM +build

    # Copy all wasm module artifacts for testing
    COPY ../wasm/integration-test/cron+build/cron.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/clocks+build/clocks.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/crypto+build/crypto.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/cardano+build/cardano.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/hashing+build/hashing.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/localtime+build/localtime.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/logger+build/logger.wasm ../wasm/test-components/
    COPY ../wasm/integration-test/smoke-test+build/smoke-test.wasm ../wasm/test-components/

    # List all WASM integration tests/benches and also run them.
    #RUN cargo test --release --test wasm-component-integration-tests -- --help
    RUN cargo test --release --test wasm-component-integration-tests -- --list
    RUN cargo test --release --test wasm-component-integration-tests -- --test
    RUN cargo test --release --test wasm-component-integration-tests -- --bench


# Test which runs check with all supported host tooling.  Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-build:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +build

## -----------------------------------------------------------------------------

# This step simulates the full CI run for local purposes only.
local-ci-run:
    BUILD +check
    BUILD +build
    #BUILD +package
    #BUILD +integrate
    #BUILD +publish

# json-schemas - Artifact so we can use the Hermes json schemas in other parts of the build.
json-schemas:
    FROM scratch

    WORKDIR /
    COPY --dir schemas .

    SAVE ARTIFACT schemas schemas
