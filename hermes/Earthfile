VERSION 0.7

#cspell: words rustup readelf nextest testci testdocs rustfmt toolsets USERARCH

# Fork the repo `wasmtime` and extract only the `wasi-preview1-component-adapter` crate from it.
fork-wasi-component-adapter:
    LOCALLY

    # The location the Earthfile for the local `wasi` crate.
    ARG wasi_cargo=crates/wasi-component-adapter/Cargo.toml
    # The location to store the Earthfile during running the script.
    ARG wasi_tmp_cargo=crates/Cargo-tmp.toml
    # The local directory to store `wasi/wit`. This needs to include along with `wasi-preview1-component-adapter`.
    ARG wit_local_dir=crates/wasi
    # The local directory to place the extracted `wasi` crate.
    ARG wasi_local_dir=crates/wasi-component-adapter
    # The location after the `wasmtime` repo was cloned.
    ARG wasi_git_dir=wasmtime/crates/wasi-preview1-component-adapter

    # First, it needs to move the existing Earthfile to the temporary location.
    # Then remove the existing local one. Clone and extract it from the repo.
    # And finally move the Earthfile back.
    RUN if [ -e $wasi_cargo ]; then mv $wasi_cargo $wasi_tmp_cargo; fi && \
        rm -rf $wasi_local_dir/ || true && \
        rm -rf $wit_local_dir/ || true && \
        git clone --depth 1 https://github.com/bytecodealliance/wasmtime.git && \
        mv $wasi_git_dir $wasi_local_dir && \
        mkdir $wit_local_dir && \
        mv wasmtime/crates/wasi/wit $wit_local_dir/wit && \
        rm -rf wasmtime/ && \
        if [ -e $wasi_tmp_cargo ]; then mv -f $wasi_tmp_cargo $wasi_cargo; fi

# Set up our target toolchains, and copy our files.
builder:
    FROM github.com/input-output-hk/catalyst-ci/earthly/rust:v2.0.3+rust-base

    DO github.com/input-output-hk/catalyst-ci/earthly/rust:v2.0.3+SETUP --toolchain=rust-toolchain.toml

    COPY --dir .cargo .config Cargo.* clippy.toml deny.toml rustfmt.toml bin crates .

# Test rust build container - Use best architecture host tools.
check-hosted:
    FROM +builder

    DO github.com/input-output-hk/catalyst-ci/earthly/rust:v2.0.3+CHECK

# Test which runs check with all supported host tooling.  Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
check-all-hosts:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +check-hosted

build-wasi-component-adapter:
    FROM +builder

    RUN cargo +nightly build -p wasi-component-adapter --target wasm32-unknown-unknown --release

    SAVE ARTIFACT hermes/target/wasm32-unknown-unknown/release/wasi_snapshot_preview1.wasm wasi-component-adapter.wasm

build-hosted:
    ARG TARGETPLATFORM

    # Build the service
    FROM +builder
 
    RUN /scripts/std_build.sh

    DO github.com/input-output-hk/catalyst-ci/earthly/rust:v2.0.3+SMOKE_TEST --bin=hermes

    SAVE ARTIFACT target/$TARGETARCH/doc doc
    SAVE ARTIFACT target/$TARGETARCH/release/hermes hermes

# Test which runs check with all supported host tooling.  Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
build-all-hosts:    
    BUILD --platform=linux/amd64 --platform=linux/arm64 +build-hosted

## -----------------------------------------------------------------------------
##
## Standard CI targets.
##
## These targets are discovered and executed automatically by CI.

# Run check using the most efficient host tooling
# CI Automated Entry point.
check:
    FROM busybox
    # This is necessary to pick the correct architecture build to suit the native machine.
    # It primarily ensures that Darwin/Arm builds work as expected without needing x86 emulation.
    # All target implementation of this should follow this pattern.
    ARG USERARCH

    IF [ "$USERARCH" == "arm64" ]
        BUILD --platform=linux/arm64 +check-hosted
    ELSE
        BUILD --platform=linux/amd64 +check-hosted
    END

# Run build using the most efficient host tooling
# CI Automated Entry point.
build:
    FROM busybox
    # This is necessary to pick the correct architecture build to suit the native machine.
    # It primarily ensures that Darwin/Arm builds work as expected without needing x86 emulation.
    # All target implementation of this should follow this pattern.
    ARG USERARCH

    IF [ "$USERARCH" == "arm64" ]
        BUILD --platform=linux/arm64 +build-hosted
    ELSE
        BUILD --platform=linux/amd64 +build-hosted
    END


# This step will build any packages we would intend to publish or integration test.
#package:
#    FROM scratch

# Run integration tests on all packages built during the `package` step.
#test:
#    FROM scratch

# Publish packages if all integration tests have passed. (Failure to pass tests will prevent packages being published.)
#publish:
#    FROM scratch

## -----------------------------------------------------------------------------

# This step simulates the full CI run for local purposes only.
local-ci-run:
    BUILD +check
    BUILD +build
    #BUILD +package
    #BUILD +integrate
    #BUILD +publish
