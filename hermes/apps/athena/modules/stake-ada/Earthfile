VERSION 0.8

IMPORT ../../../../ AS hermes
IMPORT ../../../../../wasm/wasi AS wasi
IMPORT ../.. AS athena

build-stake_ada:
    DO athena+BUILD_ATHENA_COMPONENT --out=stake_ada.wasm



# HTTP Stake ADA WASM Module Build
# =============================
# Compiles the HTTP staking module Rust code into a WebAssembly module using the wasm32-wasip2 target.
# This creates a sandboxed, portable component that can run in the Hermes runtime.
#
# Build Pipeline:
#   1. Set up Rust toolchain with WASM target support
#   2. Copy source code and dependencies into build container
#   3. Generate and integrate WIT bindings (shared across modules)
#   4. Compile to optimized WASM binary
#   5. Export artifacts for packaging
#
# Compilation Target: wasm32-wasip2 (WebAssembly System Interface Preview 2)
# Optimization: Release mode with size optimizations (opt-level = "z", lto = true)
# Output: stake_ada.wasm - Executable WebAssembly module
# Duration: ~3-5 minutes (Rust compilation to WASM)
local-build-stake-ada:
    FROM alpine
    COPY +build-stake-ada/stake_ada.wasm .

    # Copy module configuration and metadata files
    COPY lib/config.schema.json .
    COPY lib/manifest_module.json .
    COPY lib/metadata.json .
    COPY lib/settings.schema.json .

    # Create the missing config.json file (empty JSON object)
    RUN echo '{}' > config.json

    # Create staging directory structure
    RUN mkdir -p /staging/

    # Copy WASM module and JSON config files to root of staging
    RUN cp stake_ada.wasm /staging/
    RUN cp *.json /staging/ || true

    # Export build artifacts from staging directory
    SAVE ARTIFACT /staging AS LOCAL lib