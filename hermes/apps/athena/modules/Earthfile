VERSION 0.8

IMPORT github.com/input-output-hk/catalyst-ci/earthly/rust:v3.4.5 AS rust-ci
# Use when debugging cat-ci locally.
# IMPORT ../../../catalyst-ci/earthly/rust AS rust-ci

IMPORT ../../../../wasm/wasi AS wasi

# build-hermes - builds the Hermes binary in release mode
build-hermes:
    # Start with a base image
    FROM alpine:latest
    
    # Copy the hermes artifact from the build target
    COPY ../../../../hermes+build/hermes ./hermes
    
    SAVE ARTIFACT hermes AS LOCAL ./hermes

# gen-bindings - generates `hermes.rs` bindings to work with.
gen-bindings:
    FROM wasi+build-rust-bindings

    SAVE ARTIFACT hermes.rs AS LOCAL athena/modules/http-proxy/src/hermes.rs

# build-http-proxy - builds the HTTP proxy module
build-http-proxy:
    DO rust-ci+SETUP

    WORKDIR /app
    # Copy from the http-proxy module directory
    COPY --keep-ts --dir http-proxy/src .
    COPY http-proxy/Cargo.toml .
    COPY +gen-bindings/hermes.rs src/hermes.rs
    
    # Copy module configuration and metadata files
    COPY http-proxy/lib/config.schema.json .
    COPY http-proxy/lib/manifest_module.json .
    COPY http-proxy/lib/metadata.json .
    COPY http-proxy/lib/settings.schema.json .

    DO rust-ci+CARGO \
        --args "build --target wasm32-wasip2 --release" \
        --output="wasm32-wasip2/release/http_proxy.wasm"

    SAVE ARTIFACT target/wasm32-wasip2/release/http_proxy.wasm http_proxy.wasm
    SAVE ARTIFACT target/wasm32-wasip2/release/http_proxy.wasm AS LOCAL http-proxy/lib/http_proxy.wasm

# build-all - builds both Hermes binary and HTTP proxy module
build-all:
    BUILD +build-hermes
    BUILD +build-http-proxy