/// # Cardano Blockchain API
///
/// Cardano Blockchain API functionality exposed to the Hermes WASM Modules.
///
/// ## Permissions
///
/// This API is ALWAYS available.

interface api {
    use hermes:hash/api.{blake2b256};
    use hermes:cbor/api.{cbor};

    /// Slot on the Cardano blockchain.
    type slot = u64;
    /// Cardano transaction index.
    type txn-idx = u16;
    /// Cardano transaction hash.
    type txn-hash = blake2b256;


    /// Cardano blockchain network.
    variant cardano-network {
        /// Cardano Mainnet Network :- "NetworkId": 1, "NetworkMagic": 764824073
        mainnet,
        /// Cardano Preprod Network :- "NetworkId": 0, "NetworkMagic": 1
        preprod,
        /// Cardano Preview Network :- "NetworkId": 0, "NetworkMagic": 2
        preview,
        /// Custom Test Network :- "NetworkId": 0,  "NetworkMagic": u64
        testnet-magic(u64),
    }

    /// A sync slot variation.
    variant sync-slot {
        /// Genesis (first block) of the blockchain.
        genesis,
        /// A specific slot in the blockchain.
        specific(slot),
        /// The live tip of the blockchain, following the upstream node.
        tip,
        /// The immutable tip of the blockchain
        /// e.g., The last block which has reached the absolute finality and can never rolls back.
        immutable-tip,
    }

    /// Errors that can happen for subscribing to blocks
    enum subscribe-error {
        /// The slot requested is not valid.
        invalid-start-slot,
    }

    /// Errors that can happen when initialize network.
    enum create-network-error {
        /// Network not supported.
        network-not-supported,
        /// Unknown network.
        unknown-network
    }
    
    /// Errors that can happen for block.
    enum block-error {
        /// Block is not found.
        block-not-found
    }

    /// Errors that can happen for transaction.
    enum transaction-error {
        /// Transaction not found
        txn-not-found
    }

    /// Cardano network
    resource network {
        /// Create a new Cardano network instance.
        ///
        /// **Parameters**
        ///
        /// - `network`: The Cardano network to connect to (e.g., Mainnet, Preprod, Preview).
        /// 
        /// **Returns**
        /// 
        /// - `ok(network)`: A resource network, if successfully create network resource.
        /// - `error(create-network-error)`: If creating network resource failed.
        new: static func(network: cardano-network) -> result<network, create-network-error>;

        /// Subscribe to blockchain block events, start from a specified starting point.
        ///
        /// This sets up a subscription to receive new block and block rollback updates starting from the
        /// given `start`.
        ///
        /// **Parameters**
        ///
        /// - `start`: The slot to begin following from.
        ///
        /// **Returns**
        ///
        /// - `ok(u32)`: A unsigned integer represent the underlying 32-bit representation of subscription ID
        ///              resource. this subscription. Use to distinguishes events from different subscribers
        ///              and provides control over subscription management.The ID must be unique across all 
        ///              active subscriptions.
        /// - `error(subscribe-error)`: If subscription failed.
        subscribe-block: func(start: sync-slot) -> result<u32, subscribe-error>;

        /// Subscribe to blockchain immutable rolls forward.
        ///
        /// This sets up a subscription to receive event when the immutable part of the blockchain
        /// roll forwards.
        /// 
        /// **Parameters**
        ///
        /// - `start`: The slot to begin following from.
        /// 
        /// **Returns**
        /// 
        /// - `ok(u32)`: A unsigned integer represent the underlying 32-bit representation of subscription ID
        ///              resource. this subscription. Use to distinguishes events from different subscribers
        ///              and provides control over subscription management.The ID must be unique across all 
        ///              active subscriptions.
        /// - `error(subscribe-error)`: If subscription failed.
        subscribe-immutable-roll-forward: func(start: sync-slot) -> result<u32, subscribe-error>;

        /// Get a block relative to `start` by `step`.
        ///
        /// **Parameters**
        /// - `start`: Slot to begin retrieval from, current tip if `None`.
        /// - `step` 
        ///     -`0` : the block at `start`, will return `None` if there is no block exactly at this `start` slot.   
        ///     -`+n`: the `n`‑th block *after* the given `start` slot.  
        ///     –`‑n`: the `n`‑th block *before* the given `start` slot.  
        ///  
        /// Note: For both `+n` and `-n`, the `start` does not need to be a true block.  
        /// They will return the block which appears at this block offset, given the arbitrary start point.  
        /// IF the `start` block does exist, it will never returned with a positive or negative `step`, as it is `step` 0.  
        ///  
        /// Example, Given three consecutive blocks at slots `100`, `200` and `300` the following will be returned:  
        ///     - `start = 100, step = 0` -> 100 (Exact match)
        ///     - `start = 100, step = 2` -> 300 (Skips 200)
        ///     - `start = 150, step = 1` -> 200 (Rounds up from 150)
        ///     - `start = 200, step = 1` -> 300 (Forward iteration)
        ///     - `start = 300, step = -2` -> 100 (Skips 200)
        ///     - `start = 250, step = -2` -> 100 (Rounds down to 200 first)
        /// 
        /// **Returns**
        /// 
        /// - Returns a `block` resource, `None` if block cannot be retrieved.
        get-block: func(start: option<slot>, step: s64) -> option<block>;

        /// Retrieve the current tips of the blockchain.
        ///
        /// **Returns**
        ///
        /// - A tuple of two slots:
        ///   - The immutable tip.
        ///   - The mutable tip.
        /// `None` if the tips cannot be retrieved.
        get-tips: func() -> option<tuple<slot, slot>>;
    }

    /// Cardano block
    resource block {
        /// Returns whether the block is part of the immutable section of the chain.
        ///
        /// **Returns**
        ///
        /// - `true` if the block is in the immutable part.
        /// - `false` if the block is in the mutable part.
        is-immutable: func() -> bool;

        /// Returns whether the block is the first block of a rollback.  
        ///  
        /// **Returns**  
        ///  
        /// - `ok(bool)` True if the block is the first block of a rollback,
        ///              otherwise, False.  
        /// - `error(block-error)`: If block cannot be retrieved.
        is-rollback: func() -> result<bool, block-error>;

        /// Retrieves a transaction at the specified index within the block.
        ///
        /// **Parameters**
        ///
        /// - `index` : The index of the transaction to retrieve.
        ///
        /// **Returns**
        ///
        /// - `ok(transaction)` : A `transaction` resource at the given index
        /// - `error(transaction-error)`: If a transaction data does not exist in the block at the given index.
        get-txn: func(index: txn-idx) -> result<transaction, transaction-error>;

        /// Retrieves the slot number that this block belongs to.
        ///
        /// **Returns**
        ///
        /// - `slot` : The slot number of the block.
        get-slot: func() -> slot;

        /// Returns the raw CBOR representation of the block.
        ///
        /// **Returns**
        ///
        /// - `cbor` : The CBOR format of the block.
        raw: func() -> cbor;

        /// Fork count is a counter that is incremented every time there is a roll-back in
        /// live-chain. It is used to help followers determine how far to roll-back to
        /// resynchronize without storing full block history. The fork count starts at 1 for
        /// live blocks and increments if the live chain tip is purged due to a detected
        /// fork, but it does not track the exact number of forks reported by peers.
        ///
        /// - 0 - for all immutable data
        /// - 1 - for any data read from the blockchain during a *backfill* on initial sync
        /// - 2+ - for each subsequent rollback detected while reading live blocks.
        ///
        /// ** Returns **
        ///
        /// - `u64` : The fork count.
        get-fork: func() -> u64;
    }

    /// Cardano transaction
    resource transaction {
        /// Returns the transaction auxiliary metadata in CBOR format.
        ///
        /// **Parameters**
        ///
        /// - `label`: A metadata label used as a key to get the associated metadata.
        /// 
        /// **Returns**
        ///
        /// - `option<cbor>` : The CBOR format of the metadata, `None` if the label requested is not present.
        get-metadata: func(label: u64) -> option<cbor>;


        /// Returns the transaction hash.
        ///
        /// **Returns**
        /// 
        /// - `option<txn-hash>` : Cardano transaction hash - Blake2b-256, `None` if cannot retrieve the transaction hash.
        get-txn-hash: func() -> option<txn-hash>;

        /// Returns the raw CBOR representation of the transaction.
        /// 
        /// **Returns**
        ///
        /// - `option<cbor>` : The CBOR format of the transaction, `None` if cannot retrieve the raw transaction.
        raw: func() -> option<cbor>;
    }

    resource subscription-id {
        /// Returns the network that this subscription is in.
        /// 
        /// **Returns**
        /// 
        /// - `cardano-network` : The Cardano network that this subscription is in.
        get-network: func() -> cardano-network;

                
        /// Unsubscribing block event of this `subscription-id` instance.
        /// Once this function is called, the subscription instance, `subscription-id` will be removed.
        unsubscribe: func();
    }
}
