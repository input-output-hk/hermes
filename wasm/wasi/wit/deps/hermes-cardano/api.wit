/// # Cardano Blockchain API
///
/// Cardano Blockchain API functionality exposed to the Hermes WASM Modules.
///
/// ## Permissions
///
/// This API is ALWAYS available.

interface api {
    use hermes:hash/api.{blake2b256};
    use hermes:cbor/api.{cbor};

    /// Slot on the Cardano blockchain.
    type slot = u64;
    /// Cardano transaction index.
    type txn-idx = u64;
    /// Cardano transaction hash.
    type txn-hash = blake2b256;

    /// Cardano blockchain network.
    variant cardano-network {
        mainnet, // Cardano Mainnet "NetworkId": 1, "NetworkMagic": 764824073,
        preprod, // Cardano Preprod Network "NetworkId": 0, "NetworkMagic": 1
        preview, // Cardano Preview Network "NetworkId": 0, "NetworkMagic": 2,
        testnet-magic(u32), // Custom Test Network "NetworkId": 0,  "NetworkMagic": u32,
    }

    /// A sync slot variation.
    variant sync-slot {
        genesis, // Genesis of the blockchain.
        specific(slot), // A specific slot in the blockchain.
        tip, // The tip of the blockchain.
        continue, // From whenever its currently pointing.
        stop, // Stop the sync.
    }

    /// Errors that can happen for subscribing to blocks
    enum subscribe-error {
        blockchain-not-available, // The blockchain requested is not available.
        invalid-slot,   // The slot requested is not a valid slot for the blockchain.
    }

    /// Cardano network
    resource network {
        /// Create a new Cardano network instance.
        ///
        /// **Parameters**
        ///
        /// - `network`: The Cardano network to connect to (e.g., Mainnet, Preprod, Preview).
        constructor(network: cardano-network);

        /// Subscribe to blockchain block events, start from a specified starting point.
        ///
        /// This sets up a subscription to receive new block and block rollback updates starting from the
        /// given `start`.
        ///
        /// **Parameters**
        ///
        /// - `start`: The slot to begin following from.
        ///
        /// **Returns**
        ///
        /// - `ok(u64)`: A unique identifier of this subscription.
        /// - `error(subscribe-error)`: If subscription failed.
        subscribe-block: func(start: sync-slot) -> result<u64, subscribe-error>;

        /// Unsubscribing block events given a ID.
        /// Once this function is called, the subscription instance, `id` will be removed.
        /// 
        /// **Parameters**
        /// `id` : A unique identifier of the block subscription that want to unsubscribe.
        unsubscribe-block: func(id: u64);

        /// Subscribe to blockchain immutable rolls forward.
        ///
        /// This sets up a subscription to receive event when the immutable part of the blockchain
        /// roll forwards.
        /// 
        /// **Parameters**
        ///
        /// - `start`: The slot to begin following from.
        /// 
        /// **Returns**
        /// 
        /// - `ok(u64)`: A unique identifier of this subscription.
        /// - `error(subscribe-error)`: If subscription failed.
        subscribe-immutable-roll-forward: func(start: sync-slot) -> result<u64, subscribe-error>;

        /// Unsubscribing blockchain immutable rolls forward events.
        /// Once this function is called, the subscription instance, `id` will be removed.
        ///
        /// **Parameters**
        /// `id` : A unique identifier of the block subscription that want to unsubscribe.
        unsubscribe-immutable-roll-forward: func(id: u64);
        
        /// Get a block relative to `start` by `step`.
        ///
        /// **Parameters**
        /// - `start`: Slot to begin retrieval from, current tip if `None`.
        /// - `step` 
        ///     -`0` : the block at `start`.  
        ///     -`+n`: the `n`‑th block *after* the given `start` slot.  
        ///     –`‑n`: the `n`‑th block *before* the given `start` slot.  
        ///
        /// **Returns**
        /// 
        /// - Returns a block in CBOR format, `None` if block cannot be retrieved.
        get-block: func(start: option<slot>, step: s64) -> option<block>;

        /// Retrieve the current tips of the blockchain.
        ///
        /// **Returns**
        ///
        /// - A tuple of two slots:
        ///   - The immutable tip.
        ///   - The mutable tip.
        get-tips: func() -> tuple<slot, slot>;
    }

    /// Cardano block
    resource block {
        /// Returns whether the block is part of the immutable section of the chain.
        ///
        /// **Returns**
        ///
        /// - `true` if the block is in the immutable part.
        /// - `false` if the block is in the mutable part.
        is-immutable: func() -> bool;

        /// Retrieves a transaction at the specified index within the block.
        ///
        /// **Parameters**
        ///
        /// - `index` : The index of the transaction to retrieve.
        ///
        /// **Returns**
        ///
        /// - `option<transaction>` : The transaction at the given index, `None` if the index is not found.
        get-txn: func(index: txn-idx) -> option<transaction>;

        /// Returns whether the block is where the chain rolls back to.
        is-rollback: func() -> bool;

        /// Retrieves the slot number that this block belongs to.
        ///
        /// **Returns**
        ///
        /// - `slot` : The slot number of the block.
        get-slot: func() -> slot;

        /// Returns the raw CBOR representation of the block.
        ///
        /// **Returns**
        ///
        /// - `cbor` : The CBOR format of the block.
        raw: func() -> cbor;
    }

    /// Cardano transaction
    resource transaction {
        /// Returns the transaction auxiliary metadata in CBOR format.
        ///
        /// **Returns**
        ///
        /// - `cbor` : The CBOR format of the metadata.
        get-metadata: func() -> cbor;

        /// Returns the transaction hash.
        ///
        /// **Returns**
        /// - `txn-hash` : Cardano transaction hash - Blake2b-256.
        get-txn-hash: func() -> txn-hash;

        /// Returns the raw CBOR representation of the transaction.
        /// 
        /// **Returns**
        ///
        /// - `cbor` : The CBOR format of the transaction.
        raw: func() -> cbor;
    }
}
