/// # Cardano Blockchain API
///
/// Cardano Blockchain API functionality exposed to the Hermes WASM Modules.
///
/// ## Permissions
///
/// This API is ALWAYS available.
/// 
interface api {
    use hermes:binary/api.{b256};
    use hermes:cbor/api.{cbor};

    /// Slot on the Cardano blockchain.
    type slot = u64;
    /// Cardano transaction index.
    type txn-idx = u64;
    /// Cardano block data.
    type block = cbor;
    /// Cardano transaction data.
    type txn = cbor;

    // A point variation in the blockchain.
    variant point {
        genesis, // Genesis of the blockchain.
        specific(tuple<slot, b256>), // A specific point in the blockchain given the slot number and transaction hash.
        tip, // The tip of the blockchain.
        continue, // From whenever its currently pointing.
    }

    /// Cardano blockchain network.
    enum network {
        mainnet, // Cardano Mainnet
        preprod, // Cardano Preprod Network
        preview, // Cardano Preview Network
        local-test-blockchain // A local isolated test blockchain.
    }

    /// Errors that can happen subscribing to blocks
    enum subscribe-error {
        blockchain-not-available, // The blockchain requested is not available.
        invalid-slot,   // The slot requested is not a valid slot for the blockchain.
    }

    /// Unsubscribe option
    flags unsubscribe-option {
        block,  // Unsubscribe block data.
        rollback, // Unsubscribe rollback data.
        roll-forward, // Unsubscribe roll forward data.
        all // Unsubscribe all.
    }

    /// Subscribe to the Blockchain block data.
    ///
    /// **Parameters**
    ///
    /// - `network` : The blockchain network to subscribe from.
    /// - `whence`: Where to start subscribing blocks from.
    ///
    /// **Returns**
    ///
    /// - `ok(slot)` : The slot we are synching from now.
    /// - `error(subscribe-error)` : If an error occured.
    ///
    /// **Notes**
    ///
    /// If the blockchain is not yet syncing, it will start, from the requested slot.
    /// If the blockchain is not yet syncing, and `whence` == `continue` then the blockchain will
    /// not be synced from, the calling module will only be subscribed for block events.
    ///
    /// If the blockchain is already syncing, the sync will stop and restart, unless `whence` == `continue`.
    /// When `whence` == `continue` the blockchain will keep syncing from where it is at, and this module
    /// will be subscribed to block updates.
    ///
    /// `whence` == `stop` will stop blockchain from syncing, and the caller will be unsubscribed.
    ///
    subscribe-blocks: func (network: network, whence: slot) -> result<slot, subscribe-error>;

    /// Subscribe to blockchain rollback events, does not alter the blockchain sync in anyway.
    ///
    /// **Parameters**
    ///
    /// - `network` : The blockchain network to subscribe from.
    ///
    /// **Notes**
    ///
    /// After a rollback event, the blockchain sync will AUTOMATICALLY start syncing block
    /// data from the rollback point. No action is required to actually follow the rollback, unless the
    /// default behavior is not desired.
    subscribe-rollback: func (network: network);

    /// Subscribe to blockchain roll forward events, does not alter the blockchain sync in anyway.
    ///
    /// **Parameters**
    ///
    /// - `network` : The blockchain network to subscribe from.
    ///
    /// **Notes**
    ///
    /// After a roll forward event, the blockchain sync will AUTOMATICALLY start syncing data
    /// from the roll forward point. No action is required to actually follow the roll forward, unless the
    /// default behavior is not desired.
    subscribe-roll-forward: func(network: network);

    /// Unsubscribe from blockchain events.
    ///
    /// **Parameters**
    ///
    /// - `network` : The blockchain network to unsubscribe from.
    /// - `opts` : Flags specifying which event to unsubscribe from.
    ///
    /// **Notes**
    ///
    /// Unsubscribing does **not** stop the chain follower, it only removes the moduleâ€™s event subscriptions.
    unsubscribe: func(network: network, opts: unsubscribe-options);

    /// Get a block data from the requested blockchain network at the given slot.
    ///
    /// **Parameters**
    ///
    /// - `network`    : The blockchain network to get a block data from.
    /// - `slot` : Which slot number to get the block data.
    ///
    /// **Returns**
    ///
    /// - `block` : Cardano block data.
    ///
    /// **Notes**
    ///
    /// Fetching a block does not require the blockchain to be subscribed, or for blocks to be
    /// being followed and generating events.
    /// It also will not alter the automatic fetching of blocks in any way, and happens in parallel
    /// to automated block fetch.
    get-block: func (network: network, slot: slot) -> option<block>;

    /// Get a transaction data from the requested blockchain network at the given slot and transaction index.
    ///
    /// **Parameters**
    ///
    /// - `network`    : The blockchain network to get a transaction data from.
    /// - `slot` : Which slot number to get the transaction data from.
    /// - `txn-index`: Which transaction index to get the transaction data from.
    ///
    /// **Returns**
    ///
    /// - `txn` : Cardano transaction data.
    ///
    /// **Notes**
    ///
    /// Getting a transaction data does not require the blockchain to be subscribed, or for blocks to be
    /// being followed and generating events.
    /// It also will not alter the automatic fetching of blocks in any way, and happens in parallel
    /// to automated block fetch.
    get-tx: func(network: network, slot: slot, txn-index: txn-index) -> option<txn>;
}