/// # Crypto API
///
/// Crypto API functionality exposed to the Hermes WASM Modules.
///
/// ## Permissions
///
/// This API is ALWAYS available.

/// Crypto API Interface
interface api {
    use hermes:binary/api.{bstr, b256, b512};

    //  Errors that can occurs.
    enum errno {
        prefix-too-long,  // The prefix is longer than the maximum allowed length, max is 3.
        invalid-mnemonic-length,  // The mnemonic length is not a multiple of 3 or not in the range of 12 - 24.
        word-not-found,  // A word in the mnemonic is not found in the word list.
        invalid-mnemonic, // The mnemonic is invalid.
        invalid-derivational-path, // The derivational path is invalid.
        generate-entropy-failed, // Failed to generate entropy. 
        unsupported-language, // The language is not supported.
    }

    // bip32-ed25519 Private Key
    type bip32-ed25519-private-key = b256;

    // bip32-ed25519 Extended Private Key
    type bip32-ed25519-extended-private-key = b512;

    // bip32-ed25519 Public Key
    type bip32-ed25519-public-key = b256;

    // bip32-ed25519 Signature
    type bip32-ed25519-signature = b512;

    // Mnemonic
    type mnemonic-phrase = list<string>;

    // Passphrase
    type passphrase = list<string>;

    // Derivation path
    type path = string;

    type prefix = list<string>;

    /// # Generate BIP39 Mnemonic Function
    ///
    /// Generate a new BIP39 mnemonic phrase with the given
    /// size, prefix and language.
    /// 
    /// ## Parameters
    /// 
    /// `size` : The size of the mnemonic. Must be a multiple of 3 and in the range of 12 - 24. 
    /// `prefix` : The prefix for the mnemonic. Must be a list of 1 - 3 words.
    /// `language` : Optional. The language to use for the mnemonic. 
    ///              If not provided, the default language is used.
    /// 
    /// ## Returns
    /// 
    /// - Either a list of mnemonic words.
    /// - Or an error if the mnemonic could not be generated:
    ///     - `prefix-too-long` : The prefix is longer than the maximum allowed length, max is 3.
    ///     - `invalid-mnemonic-length` : The mnemonic length is not a multiple of 3 or not in the range of 12 - 24.     
    ///     - `word-not-found` : A word in the mnemonic is not found in the word list.
    ///     - `generate-entropy-failed` : Failed to generate entropy.
    /// 
    generate-mnemonic: func(size: u8, prefix: prefix, language: option<string>) -> result<mnemonic-phrase, errno>;

    resource bip32-ed25519 {
        /// Create a new BIP32-Ed25519 Crypto resource
        /// 
        /// **Parameters**
        ///
        /// - `mnemonic-phrase` : BIP39 mnemonic.
        /// - `passphrase` : Optional BIP39 passphrase.
        /// 
        constructor(mnemonic: mnemonic-phrase, passphrase: option<passphrase>);

        /// Get the public key for this private key.
        public-key: func() -> bip32-ed25519-public-key;

        /// Sign data with the Private key, and return it.
        /// 
        /// **Parameters**
        ///
        /// - `data` : The data to sign.
        /// 
        sign-data: func(data: bstr) -> bip32-ed25519-signature;


        /// Check a signature on a set of data.
        /// 
        /// **Parameters**
        ///
        /// - `data` : The data to check.
        /// - `sig`  : The signature to check.
        /// 
        /// **Returns**
        /// 
        /// - `true` : Signature checked OK.
        /// - `false` : Signature check failed.
        ///
        check-sig: func(data: bstr, sig: bip32-ed25519-signature) -> bool;

        /// Derive a new private key from the current private key.
        /// 
        /// **Parameters**
        ///
        /// - `path` : Derivation path.
        /// 
        /// Note: uses BIP32 HD key derivation.
        /// 
        derive: func(path: path) -> bip32-ed25519;
    }
}

/// World just for the Hermes 'json' API.
world crypto-api {
    import api;
}
