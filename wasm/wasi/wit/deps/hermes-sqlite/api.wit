
interface api {
    // Errors that indicate that something has gone wrong.
    enum errno {
        /// A generic error code that is used when no other more specific error code is available.
        error,
        /// An internal malfunction.
        internal,
        /// The requested access mode for a newly created database could not be provided.
        perm,
        /// An operation was aborted prior to completion.
        abort,
        /// The database file could not be written (or in some cases read) because of concurrent activity by some other database connection.
        busy,
        /// A write operation could not continue because of a conflict within the same database connection or a conflict with a different database connection that uses a shared cache.
        locked,
        /// SQLite was unable to allocate all the memory it needed to complete the operation.
        nomem,
        /// When an attempt is made to alter some data for which the current database connection does not have write permission.
        readonly,
        /// An operation was interrupted.
        interrupt,
        /// The operation could not finish because the operating system reported an I/O error.
        ioerr,
        /// The database file has been corrupted.
        corrupt,
        /// When a file control operation is not recognized by the VFS.
        notfound,
        /// A write could not complete because the disk is full.
        full,
        /// SQLite was unable to open a file.
        cantopen,
        /// A problem with the file locking protocol used by SQLite.
        protocol,
        /// Not currently used.
        empty,
        /// The database schema has changed.
        schema,
        /// A string or BLOB was too large.
        toobig,
        /// An SQL constraint violation occurred while trying to process an SQL statement.
        constraint,
        /// A datatype mismatch.
        mismatched,
        /// If the application uses any SQLite interface in a way that is undefined or unsupported.
        misuse,
        /// Can be returned on systems that do not support large files when the database grows to be larger than what the filesystem can handle.
        nolfs,
        /// An SQL statement being prepared is not authorized.
        auth,
        /// Not currently used.
        format,
        /// The parameter number argument to one of the `sqlite3_bind` routines or the column number in one of the `sqlite3_column` routines is out of range.
        range,
        /// The file being opened does not appear to be an SQLite database file.
        notadb,
        /// An unusual operation is taking place.
        notice,
        /// An unusual and possibly ill-advised operation is taking place.
        warning,
    }

    variant config-options {
        singlethread,
        multithread,
        serialized
    }

    variant value {
        blob(list<u8>),
        double(float64),
        int32(s32),
        int64(s64),
        null,
        text(string)
    }

    /// The database connection object.
    resource sqlite {
        /// Close a database connection, destructor for `sqlite3`.
        ///
        /// Ideally, applications should finalize all prepared statements associated with the `sqlite3` object prior to attempting to close the object.
        /// If the database connection is associated with unfinalized prepared statements,
        /// then the function will leave the database connection open and return the `busy` error code.
        ///
        /// If an `sqlite3` object is destroyed while a transaction is open, the transaction is automatically rolled back.
        close: func() -> result<_, errno>;

        /// Use to make global configuration changes to SQLite in order to tune SQLite to the specific needs of the application.
        config: func(opt: config-options) -> result<_, errno>;

        status: func() -> result<_, errno>;
    }

    /// The prepared statement object.
    resource statement {
        /// Store application data into parameters of the original SQL.
        ///
        /// ## Parameters
        ///
        /// - `index`: The index of the SQL parameter to be set.
        /// - `value`: The value to bind to the parameter.
        ///
        bind: func(index: u32, value: value) -> result<_, errno>;

        /// Advance a statement to the next result row or to completion.
        ///
        /// After a prepared statement has been prepared, this function must be called one or more times to evaluate the statement.
        step: func() -> result<_, errno>;

        /// Return information about a single column of the current result row of a query.
        ///
        /// ## Parameters
        ///
        /// - `index`: The index of the column for which information should be returned. The leftmost column of the result set has the index 0.
        ///
        column: func(index: u32) -> result<value, errno>;

        /// Destroy a prepared statement object. If the most recent evaluation of the statement encountered no errors or if the statement is never been evaluated,
        /// then the function results without errors. If the most recent evaluation of statement failed, then the function results the appropriate error code.
        ///
        /// The application must finalize every prepared statement in order to avoid resource leaks.
        /// It is a grievous error for the application to try to use a prepared statement after it has been finalized.
        /// Any use of a prepared statement after it has been finalized can result in undefined and undesirable behavior such as segfaults and heap corruption.
        finalize: func() -> result<_, errno>;
    }

    /// Open a connection to a new or existing SQLite database.
    ///
    /// ## Parameters
    ///
    /// - `readonly`: If set to true, the database is opened in read-only mode. An error is returned if the database doesn't already exist.
    /// - `memory`: If set to true, the database will be opened as an in-memory database.
    ///
    /// ## Returns
    ///
    /// If the database is opened (and/or created) successfully, then the `sqlite3` object is returned. Otherwise an error code is returned.
    open: func(readonly: bool, memory: bool) -> result<sqlite, errno>;

    /// Compile SQL text into byte-code that will do the work of querying or updating the database.
    ///
    /// ## Parameters
    ///
    /// - `db`: Database handle.
    /// - `sql`: SQL statement, UTF-8 encoded.
    ///
    /// ## Returns
    ///
    /// A compiled prepared statement that can be executed using `sqlite3_step()`.
    /// If there is an error or the input text contains no SQL (if the input is an empty string or a comment) then an error code is returned.
    prepare: func(db: sqlite, sql: string) -> result<statement, errno>;
}

/// World just for the Hermes 'sqlite' API.
world sqlite-api {
    import api;
}
