VERSION 0.8

IMPORT github.com/input-output-hk/catalyst-ci/earthly/rust:v3.5.14 AS rust-ci
IMPORT github.com/input-output-hk/catalyst-ci/earthly/go:v3.5.14 AS go-ci
IMPORT github.com/input-output-hk/catalyst-ci/earthly/wasm/c:v3.5.14 AS wasm-c-ci

# Use when debugging cat-ci locally.
# IMPORT ../../catalyst-ci/earthly/rust AS rust-ci

#cspell: words rustfmt wasi autodrop teavm

# Make am Artifact which consists of the WIT SRC.
builder:
    ARG wasi_src_dir=../wasi

    DO rust-ci+SETUP

    COPY ..+wasi-src/wasi $wasi_src_dir

# Build the WASI Docs:
build:
    FROM +builder

    # Generate the WASI API Documentation Artifact (Also checks the WASI definitions are valid.)
    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs ../wasi/wit

    # We do this because the single doc above seems broken.  Rather than automate this,
    # it would be better to fix whats wrong with doc generating a large file.

    RUN mkdir -p wasi-hermes-docs/wasi &&\
        mkdir -p wasi-hermes-docs/hermes

    # WASI standard APIs
    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w wasi:cli/imports@0.2.6 ../wasi/wit &&\
        mv wasi-hermes-docs/imports.md wasi-hermes-docs/wasi/cli.md

    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w wasi:clocks/imports@0.2.6 ../wasi/wit &&\
        mv wasi-hermes-docs/imports.md wasi-hermes-docs/wasi/clock.md

    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w wasi:filesystem/imports@0.2.6 ../wasi/wit &&\
        mv wasi-hermes-docs/imports.md wasi-hermes-docs/wasi/filesystem.md

    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w wasi:io/imports@0.2.6 ../wasi/wit &&\
        mv wasi-hermes-docs/imports.md wasi-hermes-docs/wasi/io.md

    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w wasi:random/imports@0.2.6 ../wasi/wit &&\
        mv wasi-hermes-docs/imports.md wasi-hermes-docs/wasi/random.md

    # Hermes Specific APIs
    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w hermes:binary/all ../wasi/wit &&\
        mv wasi-hermes-docs/all.md wasi-hermes-docs/hermes/binary.md

    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w hermes:cardano/all ../wasi/wit &&\
        mv wasi-hermes-docs/all.md wasi-hermes-docs/hermes/cardano.md

    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w hermes:cbor/all ../wasi/wit &&\
        mv wasi-hermes-docs/all.md wasi-hermes-docs/hermes/cbor.md

    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w hermes:cron/all ../wasi/wit &&\
        mv wasi-hermes-docs/all.md wasi-hermes-docs/hermes/cron.md

    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w hermes:crypto/all ../wasi/wit &&\
        mv wasi-hermes-docs/all.md wasi-hermes-docs/hermes/crypto.md

    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w hermes:hash/all ../wasi/wit &&\
        mv wasi-hermes-docs/all.md wasi-hermes-docs/hermes/hash.md

    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w hermes:init/all ../wasi/wit &&\
        mv wasi-hermes-docs/all.md wasi-hermes-docs/hermes/init.md

    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w hermes:json/all ../wasi/wit &&\
        mv wasi-hermes-docs/all.md wasi-hermes-docs/hermes/json.md

    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w hermes:kv-store/all ../wasi/wit &&\
        mv wasi-hermes-docs/all.md wasi-hermes-docs/hermes/kv-store.md

    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w hermes:localtime/all ../wasi/wit &&\
        mv wasi-hermes-docs/all.md wasi-hermes-docs/hermes/localtime.md

    RUN wit-bindgen markdown --html-in-md --out-dir wasi-hermes-docs -w hermes:logging/all ../wasi/wit &&\
        mv wasi-hermes-docs/all.md wasi-hermes-docs/hermes/logging.md

    SAVE ARTIFACT wasi-hermes-docs wasi-hermes-docs

# builds a wasm32-wasip2 component and saves it as an artifact
BUILD_RUST_COMPONENT:
    FUNCTION

    ARG wasi_src_dir=../wasi # where should the /wasi directory reside at compilation
    ARG out=out.wasm # name of the saved artifact

    FROM +builder --wasi_src_dir=$wasi_src_dir

    COPY --keep-ts --dir src .
    COPY Cargo.toml .

    DO rust-ci+CARGO \
        --args "build --target wasm32-wasip2 --release" \
        --output="wasm32-wasip2/release/$out"

    SAVE ARTIFACT target/wasm32-wasip2/release/$out $out

# builds a wasm32-wasip2 component and saves it as an artifact
BUILD_C_COMPONENT:
    FUNCTION

    ARG --required c_files # C code being build
    ARG wit_root=./hermes.wit # import path for the root world file
    ARG wasi_src_dir=. # where should the /wasi directory reside at compilation
    ARG out=out.wasm # name of the saved artifact

    FROM wasm-c-ci+wasm-c-base

    COPY ..+wasi-src/wasi $wasi_src_dir
    COPY $wit_root $wasi_src_dir/wit/hermes.wit
    COPY ./$c_files .

    RUN /scripts/std_build.py --wit_path=$wasi_src_dir/wit --c_files=$c_files --out=out.wasm

    SAVE ARTIFACT out.wasm $out

# test-rust-bindings - Test we can generate rust bindings without error from the hermes default world
build-rust-bindings:
    FROM +builder

    RUN wit-bindgen rust --generate-all -w hermes:wasi/hermes ../wasi/wit

    SAVE ARTIFACT hermes.rs

# test-c-bindings - Test we can generate C bindings without error from the hermes default world
build-c-bindings:
    FROM +builder

    RUN wit-bindgen c --autodrop-borrows yes --no-object-file ../wasi/wit --out-dir bindings/c

    SAVE ARTIFACT bindings

# build-package-wasm-for-go-bindings - Install tools used to create Go WASM bindings.
# This mainly packages the local WIT interface/component into a WASM Component artifact.
#
# Generating Go WASM bindings requires `go.mod` with a
# `tool (go.bytecodealliance.org/cmd/wit-bindgen-go)`
# For a complete example including Go bindings setup, see `wasm/integration-test/golang/Earthfile`.
build-package-wasm-for-go-bindings:
    FROM go-ci+go-wasm-builder
    WORKDIR /work
    COPY ..+wasi-src/wasi .
    # `wkg wit build` uses `wkg.toml` to help resolve import dependencies.
    # This generate hermes:wasi.wasm
    RUN wkg wit build --wit-dir ./wit
    SAVE ARTIFACT hermes:wasi.wasm

# test-java-bindings - Test we can generate Java bindings without error from the hermes default world
test-java-bindings:
    FROM +builder

    # java bindings are currently broken because `resource` is not yet implemented.
    RUN wit-bindgen teavm-java ../wasi/wit | true

# test-csharp-bindings - Test we can generate CSharp bindings without error from the hermes default world
test-csharp-bindings:
    FROM +builder

    # csharp bindings are currently broken because `lots of stuff is not yet implemented.
    RUN wit-bindgen c-sharp -r mono --generate-stub ../wasi/wit | true

local-c-bindings:
    FROM +build-c-bindings

    SAVE ARTIFACT bindings AS LOCAL bindings
