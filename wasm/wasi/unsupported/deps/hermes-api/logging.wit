/// # Logging API
///
/// Logging API functionality exposed to the Hermes WASM Modules.
///
/// ## Permissions
///
/// This API is ALWAYS available, and not permissioned.

/// Logging API Interface
default interface logging {
    use pkg.types.{json}

    /// The supported logging levels
    enum level {
        /// Debug Log Level
        debug,
        /// Tracing Log level
        trace,
        /// General Informational Log Level
        info,
        /// Warning about something that might be a problem.
        warn,
        /// A very serious error
        error,
    }

    /// Generate a Log
    ///
    /// The Hermes API will add extra information to the log, such as the instance of the webasm
    /// module being logged.
    /// The Webasm module does not need to concern itself with this kind of information, and should
    /// log as if it is the only instance.
    /// It also should not log any webasm shared context, except where it is relevant to the log message itself.
    ///
    /// **Parameters**
    ///
    /// - `level` : The log level this message is for.
    /// - `file`  : The name of the src file being logged from.
    /// - `fn`    : The function within the file being logged from.
    /// - `msg`   : A Single line message to be logged. (Should have no newlines or format).
    /// - `data`  : A Free form json payload that will be logged with the msg.  This must be valid JSON.
    ///
    /// *Notes*
    ///
    /// The `data` parameter may contain a record of the format:
    /// ```json
    /// {
    ///     "bt" : [ <string> , <string> ]
    /// }
    /// ```
    /// The logger will interpret this as a backtrace where each entry in the array is one line of the backtrace.
    /// The format of the backtrace lines is up to the webasm, code.
    /// The individual backtrace entries may contain line breaks if the backtrace entry is
    /// multiline.
    /// This is to keep the broadest flexibility for multiple languages capabilities.
    /// The backtrace must be sorted with most recent lines of the backtrace occurring first in the array.
    log: func(level: level, file: string, fn: string, line: u32, col:u32, msg: string, data: option<json>) -> ()
}
