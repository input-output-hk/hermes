VERSION 0.8

IMPORT github.com/input-output-hk/catalyst-ci/earthly/rust:v3.1.1 AS rust-ci
# Use when debugging cat-ci locally.
# IMPORT ../../catalyst-ci/earthly/rust AS rust-ci

#cspell: words rustfmt wasi

# Set up our target toolchains, and copy source files.
builder:
    DO rust-ci+SETUP

    COPY --dir .cargo .config src .
    COPY ..+wasi-src/wasi ../wasi
    COPY Cargo.toml build.rs .
    COPY clippy.toml deny.toml rustfmt.toml .

# Run quality checks.
check:
    FROM +builder

    DO rust-ci+EXECUTE --cmd="/scripts/std_checks.py"

# Test which runs check with all supported host tooling.  Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-check:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +check

# Build the service.
build:
    FROM +builder

    DO rust-ci+EXECUTE \
        --cmd="/scripts/std_build.py" \
        --args1="--disable_tests" \
        --args2="--disable_benches" \
        --args3="--disable_docs" \
        --args4="--build_flags=\"--target=wasm32-unknown-unknown\"" \
        --output="wasm32-unknown-unknown/release/wasi_snapshot_hermes.wasm"

    SAVE ARTIFACT target/wasm32-unknown-unknown/release/wasi_snapshot_hermes.wasm wasi-hermes-component-adapter.wasm

# Test which runs check with all supported host tooling.  Needs qemu or rosetta to run.
# Only used to validate tooling is working across host toolsets.
all-hosts-build:
    BUILD --platform=linux/amd64 --platform=linux/arm64 +build
