searchState.loadedDescShard("cardano_chain_follower", 0, "Cardano chain follower.\nNew block inserted on chain.\nBlockfetch protocol error.\nEnum of chain updates received by the follower.\nChainsync protocol error.\nClient connection error.\nData encoding/decoding error.\nContains the error value\nCrate error type.\nFollower background follow task has stopped.\nCardano chain follower.\nConfiguration for the Cardano chain follower.\nBuilder used to create <code>FollowerConfig</code>s.\nInternal Error\nThe human readable name of the Cardano mainnet network.\nCardano mainnet network.\nMithril snapshot error.\nCBOR encoded data of a multi-era block.\nEnum of possible Cardano networks.\nContains the success value\nThe human readable name of the Cardano pre-production …\nThe human readable name of the Cardano preview network.\nFailed to parse\nA point within a chain\nRepresents a specific point of the chain.\nA point in the chain or the tip.\nCardano pre-production network.\nCardano preview network.\nHandler for receiving the read block response from the …\nHandler for receiving the read block range response from …\nCrate result type.\nChain rollback to the given block.\nFollower failed to set its read pointer.\nThe human readable name of a Cardano local testnet network.\nCardano testnet network.\nRepresents the tip of the chain.\nBlock buffer size option.\nConfigured chain update buffer size.\nChain update receiver.\nClient connection information.\nDecodes the data into a multi-era block.\nCardano chain follow module.\nWhere to start following from.\nWhere to start following from.\nFollow task thread join handle.\nFollow task request sender.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>MultiEraBlockData</code> returning the block data …\nInternal Mithril snapshot functions.\nOptional Mithril snapshot information.\nPath to the Mithril snapshot the follower should use.\nPath to the Mithril snapshot the follower should use.\nReturn genesis values for given network\nValidate a multi-era block.\nNew block inserted on chain.\nEnum of chain updates received by the follower.\nInformation used to connect to a client.\nDefault <code>Follower</code> block buffer size.\nCardano chain follower.\nConfiguration for the Cardano chain follower.\nBuilder used to create <code>FollowerConfig</code>s.\nHandler for receiving the read block response from the …\nHandler for receiving the read block range response from …\nChain rollback to the given block.\nNode’s address\nGets the chain update’s block data.\nBuilds a <code>FollowerConfig</code>.\nSets the size of the chain updates buffer used by the …\nBlock buffer size option.\nConfigured chain update buffer size.\nChain update receiver.\nClient connection information.\nCloses the follower connection and stops its background …\nConnects the follower to a producer using the node-to-node …\nSets the point at which the follower will start following …\nWhere to start following from.\nWhere to start following from.\nFollow task thread join handle.\nFollow task request sender.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptional Mithril snapshot information.\nSets the path of the Mithril snapshot the <code>Follower</code> will …\nPath to the Mithril snapshot the follower should use.\nPath to the Mithril snapshot the follower should use.\nNetwork magic\nReceive the next chain update from the producer.\nRequests the client to read a block.\nReads a block from the network using the N2N client.\nRequest the client to read a block range.\nReads a range of blocks from the network using the N2N …\nFinds the tip point.\nSets the N2N remote client’s read pointer.\nSet the follower’s chain read-pointer. Returns None if …\nContains functions related to the Follower’s background …\nHolds state for a follow task.\nRequest the task to set the read pointer to the given …\nPoint at which to set the read pointer.\nChain update sender.\nClient connection info.\nSends the next chain update to the follower. This can be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptional Mithril Snapshot that will be used by the follow …\nWaits for the next update from the node the client is …\nRequest receiver.\nThe channel that will be used to send the request’s …\nRuns the follow task.\nSends the next chain update through the follower’s chain …\nSpawn a follow task.\nHolds information about a Mithril snapshot.\nWraps the iterator type returned by Pallas.\nNaively checks if the snapshot contains a point.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets information about the snapshot at the given path.\nInner iterator.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPath to the Mithril snapshot.\nSnapshot’s tip.\nTries reading a block from the Mithril snapshot. Returns …\nTries reading a range of blocks from the Mithril snapshot. …\nTries get an iterator that reads blocks from the Mithril …")