
crate hermes
├── mod app: pub(crate)
│   ├── struct Application: pub(crate)
│   └── struct ApplicationName: pub(crate)
├── mod cli: pub(crate)
│   ├── struct Cli: pub(crate)
│   ├── enum Commands: pub(self)
│   ├── mod app: pub(self)
│   │   ├── enum Commands: pub(crate)
│   │   ├── mod package: pub(self)
│   │   │   └── struct PackageCommand: pub(crate)
│   │   └── mod sign: pub(self)
│   │       └── struct SignCommand: pub(crate)
│   ├── mod build_info: pub(self)
│   ├── mod module: pub(self)
│   │   ├── enum Commands: pub(crate)
│   │   ├── mod package: pub(self)
│   │   │   └── struct PackageCommand: pub(crate)
│   │   └── mod sign: pub(self)
│   │       └── struct SignCommand: pub(crate)
│   └── mod run: pub(self)
│       └── struct Run: pub(crate)
├── mod errors: pub(crate)
│   └── struct Errors: pub(crate)
├── mod event: pub(crate)
│   ├── struct HermesEvent: pub(crate)
│   ├── trait HermesEventPayload: pub(crate)
│   ├── enum TargetApp: pub(crate)
│   ├── enum TargetModule: pub(crate)
│   └── mod queue: pub(crate)
│       ├── struct AlreadyInitializedError: pub(crate)
│       ├── struct CannotAddEventError: pub(crate)
│       ├── struct HermesEventQueue: pub(self)
│       └── struct NotInitializedError: pub(crate)
├── mod hdf5: pub(crate)
│   ├── mod compression: pub(self)
│   ├── mod dir: pub(self)
│   │   └── struct Dir: pub(crate)
│   ├── mod file: pub(self)
│   │   └── struct File: pub(crate)
│   ├── mod path: pub(self)
│   │   └── struct Path: pub(crate)
│   └── mod resources: pub(crate)
│       ├── trait ResourceTrait: pub(crate)
│       ├── mod builder: pub(self)
│       │   └── enum ResourceBuilder: pub(crate)
│       ├── mod bytes: pub(crate)
│       │   └── struct BytesResource: pub(crate)
│       ├── mod fs: pub(self)
│       │   └── struct FsResource: pub(crate)
│       ├── mod hdf5: pub(self)
│       │   └── enum Hdf5Resource: pub(crate)
│       └── mod uri: pub(self)
│           └── struct Uri: pub(crate)
├── mod ipfs: pub(crate)
│   ├── struct AppIpfsState: pub(self)
│   ├── struct HermesIpfsNode: pub(crate)
│   ├── mod api: pub(self)
│   └── mod task: pub(self)
│       └── enum IpfsCommand: pub(crate)
├── mod logger: pub(crate)
│   ├── enum LogLevel: pub(crate)
│   ├── struct LoggerConfig: pub(crate)
│   └── struct LoggerConfigBuilder: pub(crate)
├── mod packaging: pub(crate)
│   ├── struct FileError: pub(self)
│   ├── struct MissingPackageFileError: pub(crate)
│   ├── mod app: pub(crate)
│   │   ├── struct ApplicationPackage: pub(crate)
│   │   ├── mod app_builder: pub(self)
│   │   ├── mod author_payload: pub(self)
│   │   │   ├── struct SignaturePayload: pub(crate)
│   │   │   ├── struct SignaturePayloadBuilder: pub(crate)
│   │   │   ├── struct SignaturePayloadModule: pub(crate)
│   │   │   └── struct SignaturePayloadModuleBuilder: pub(crate)
│   │   ├── mod manifest: pub(self)
│   │   │   ├── struct Manifest: pub(crate)
│   │   │   ├── struct ManifestModule: pub(crate)
│   │   │   └── mod serde_def: pub(self)
│   │   │       ├── struct ManifestModuleSerde: pub(self)
│   │   │       └── struct ManifestSerde: pub(crate)
│   │   └── mod module_info: pub(self)
│   │       └── struct AppModuleInfo: pub(crate)
│   ├── mod hash: pub(crate)
│   │   ├── struct Blake2b256: pub(crate)
│   │   └── struct Blake2b256Hasher: pub(crate)
│   ├── mod metadata: pub(crate)
│   │   ├── struct Metadata: pub(crate)
│   │   └── trait MetadataSchema: pub(crate)
│   ├── mod module: pub(crate)
│   │   ├── struct ModulePackage: pub(crate)
│   │   ├── mod author_payload: pub(self)
│   │   │   ├── struct SignaturePayload: pub(crate)
│   │   │   ├── struct SignaturePayloadBuilder: pub(crate)
│   │   │   ├── struct SignaturePayloadConfig: pub(self)
│   │   │   └── struct SignaturePayloadSettings: pub(self)
│   │   ├── mod config: pub(self)
│   │   │   ├── struct Config: pub(crate)
│   │   │   └── struct ConfigSchema: pub(crate)
│   │   ├── mod config_info: pub(self)
│   │   │   └── struct ConfigInfo: pub(crate)
│   │   ├── mod manifest: pub(self)
│   │   │   ├── struct Manifest: pub(crate)
│   │   │   ├── struct ManifestConfig: pub(crate)
│   │   │   ├── struct ManifestSettings: pub(crate)
│   │   │   └── mod serde_def: pub(self)
│   │   │       ├── struct ConfigSerde: pub(self)
│   │   │       ├── struct ManifestSerde: pub(crate)
│   │   │       └── struct SettingsSerde: pub(self)
│   │   └── mod settings: pub(self)
│   │       └── struct SettingsSchema: pub(crate)
│   ├── mod package: pub(crate)
│   │   └── struct Package: pub(crate)
│   ├── mod schema_validation: pub(self)
│   │   └── struct SchemaValidator: pub(crate)
│   └── mod sign: pub(crate)
│       ├── mod certificate: pub(crate)
│       │   ├── struct Certificate: pub(crate)
│       │   ├── struct CertificateDecodingError: pub(crate)
│       │   └── mod storage: pub(crate)
│       │       └── struct CertificateStorage: pub(self)
│       ├── mod keys: pub(crate)
│       │   ├── struct KeyPemDecodingError: pub(crate)
│       │   ├── struct PrivateKey: pub(crate)
│       │   └── struct PublicKey: pub(crate)
│       └── mod signature: pub(crate)
│           ├── struct Signature: pub(crate)
│           └── trait SignaturePayloadEncoding: pub(crate)
├── mod reactor: pub(crate)
│   ├── struct AlreadyInitializedError: pub(crate)
│   ├── struct NotInitializedError: pub(crate)
│   └── struct Reactor: pub(self)
├── mod runtime_context: pub(crate)
│   └── struct HermesRuntimeContext: pub(crate)
├── mod runtime_extensions: pub(crate)
│   ├── mod app_config: pub(self)
│   │   └── struct SqliteConfig: pub(crate)
│   ├── mod bindings: pub(crate)
│   ├── mod hermes: pub
│   │   ├── mod binary: pub(crate)
│   │   │   └── mod host: pub(self)
│   │   ├── mod cardano: pub(crate)
│   │   │   ├── type ModuleStateKey: pub(self)
│   │   │   ├── type Result: pub(super)
│   │   │   ├── struct State: pub(self)
│   │   │   ├── struct SubscriptionState: pub(self)
│   │   │   ├── enum SubscriptionType: pub(super)
│   │   │   ├── mod chain_follower_task: pub(self)
│   │   │   │   ├── enum Command: pub(self)
│   │   │   │   ├── type CommandReceiver: pub(self)
│   │   │   │   ├── type CommandSender: pub(self)
│   │   │   │   ├── struct EventSubscriptions: pub(self)
│   │   │   │   └── struct Handle: pub
│   │   │   ├── mod event: pub(self)
│   │   │   │   ├── struct OnCardanoBlockEvent: pub(super)
│   │   │   │   ├── struct OnCardanoRollback: pub(super)
│   │   │   │   └── struct OnCardanoTxnEvent: pub(super)
│   │   │   ├── mod host: pub(self)
│   │   │   └── mod tokio_runtime_task: pub(self)
│   │   │       ├── enum Command: pub(self)
│   │   │       ├── type CommandReceiver: pub(self)
│   │   │       ├── type CommandSender: pub(self)
│   │   │       └── struct Handle: pub
│   │   ├── mod cbor: pub(crate)
│   │   │   └── mod host: pub(self)
│   │   ├── mod cron: pub(crate)
│   │   │   ├── enum Error: pub
│   │   │   ├── mod event: pub(self)
│   │   │   │   ├── struct CronDuration: pub(crate)
│   │   │   │   └── struct OnCronEvent: pub(crate)
│   │   │   ├── mod host: pub(self)
│   │   │   ├── mod queue: pub(self)
│   │   │   │   ├── struct CronEventQueue: pub(crate)
│   │   │   │   ├── enum CronJob: pub(crate)
│   │   │   │   └── struct CronJobDelay: pub(crate)
│   │   │   └── mod state: pub(self)
│   │   │       └── struct InternalState: pub(self)
│   │   ├── mod crypto: pub(crate)
│   │   │   ├── mod bip32_ed25519: pub(self)
│   │   │   ├── mod bip39: pub(self)
│   │   │   ├── mod host: pub(self)
│   │   │   └── mod state: pub(self)
│   │   │       └── type State: pub(super)
│   │   ├── mod hash: pub(crate)
│   │   │   ├── mod blake2b: pub(self)
│   │   │   └── mod host: pub(self)
│   │   ├── mod http_gateway: pub(crate)
│   │   │   ├── mod event: pub(self)
│   │   │   │   ├── type Body: pub(self)
│   │   │   │   ├── type Code: pub(self)
│   │   │   │   ├── struct HTTPEvent: pub(crate)
│   │   │   │   ├── enum HTTPEventMsg: pub(crate)
│   │   │   │   ├── type HeadersKV: pub
│   │   │   │   ├── type Method: pub(self)
│   │   │   │   └── type Path: pub(self)
│   │   │   ├── mod gateway_task: pub(self)
│   │   │   │   ├── struct ClientIPAddr: pub(crate)
│   │   │   │   ├── struct Config: pub(crate)
│   │   │   │   ├── struct ConnectionManager: pub(crate)
│   │   │   │   ├── struct EventUID: pub(crate)
│   │   │   │   ├── struct Hostname: pub(crate)
│   │   │   │   ├── struct LiveConnection: pub(crate)
│   │   │   │   └── struct Processed: pub(crate)
│   │   │   └── mod routing: pub(self)
│   │   │       └── struct Hostname: pub(crate)
│   │   ├── mod init: pub(crate)
│   │   │   └── mod event: pub(self)
│   │   │       └── struct InitEvent: pub(crate)
│   │   ├── mod integration_test: pub
│   │   │   └── mod event: pub
│   │   │       ├── enum EventType: pub
│   │   │       ├── struct OnBenchEvent: pub
│   │   │       └── struct OnTestEvent: pub
│   │   ├── mod ipfs: pub(crate)
│   │   │   ├── mod event: pub(crate)
│   │   │   │   └── struct OnTopicEvent: pub(crate)
│   │   │   └── mod host: pub(self)
│   │   ├── mod json: pub(crate)
│   │   │   └── mod host: pub(self)
│   │   ├── mod kv_store: pub(crate)
│   │   │   ├── mod event: pub(crate)
│   │   │   │   └── struct KVUpdateEvent: pub(self)
│   │   │   └── mod host: pub(self)
│   │   ├── mod localtime: pub(crate)
│   │   │   ├── mod host: pub(self)
│   │   │   └── mod time: pub(self)
│   │   ├── mod logging: pub(crate)
│   │   │   ├── mod host: pub(self)
│   │   │   └── mod log_msg: pub(self)
│   │   └── mod sqlite: pub(crate)
│   │       ├── mod connection: pub(self)
│   │       │   ├── mod core: pub(super)
│   │       │   └── mod host: pub(self)
│   │       ├── mod core: pub(self)
│   │       ├── mod host: pub(self)
│   │       ├── mod state: pub(self)
│   │       │   ├── type DbState: pub(super)
│   │       │   ├── type ObjectPointer: pub(super)
│   │       │   └── type StatementState: pub(super)
│   │       └── mod statement: pub(self)
│   │           ├── mod core: pub(super)
│   │           └── mod host: pub(self)
│   ├── mod resource_manager: pub(self)
│   │   ├── struct ApplicationResourceStorage: pub(crate)
│   │   └── struct ResourceStorage: pub(crate)
│   └── mod wasi: pub(self)
│       ├── mod cli: pub(crate)
│       │   └── mod host: pub(self)
│       ├── mod clocks: pub(crate)
│       │   ├── mod monotonic: pub(self)
│       │   │   └── mod host: pub(self)
│       │   ├── mod state: pub(self)
│       │   │   └── struct ClockState: pub(self)
│       │   └── mod wall: pub(self)
│       │       └── mod host: pub(self)
│       ├── mod filesystem: pub(crate)
│       │   ├── mod host: pub(self)
│       │   └── mod state: pub(self)
│       │       ├── enum Descriptor: pub(crate)
│       │       └── type Descriptors: pub(crate)
│       ├── mod http: pub(crate)
│       │   └── mod host: pub(self)
│       ├── mod io: pub(crate)
│       │   ├── mod error: pub(crate)
│       │   │   └── mod host: pub(self)
│       │   └── mod streams: pub(crate)
│       │       ├── mod host: pub(self)
│       │       └── mod state: pub(self)
│       │           ├── trait InputStreamTrait: pub(crate)
│       │           ├── type InputStreams: pub(crate)
│       │           ├── trait OutputStreamTrait: pub(crate)
│       │           └── type OutputStreams: pub(crate)
│       └── mod random: pub(crate)
│           ├── mod insecure: pub(crate)
│           │   └── mod host: pub(self)
│           ├── mod insecure_seed: pub(crate)
│           │   └── mod host: pub(self)
│           └── mod secure: pub(crate)
│               └── mod host: pub(self)
├── mod utils: pub(crate)
├── mod vfs: pub(crate)
│   ├── struct Vfs: pub(crate)
│   ├── mod bootstrap: pub(self)
│   │   ├── struct DirToCreate: pub(self)
│   │   ├── struct MountedDir: pub(self)
│   │   ├── struct MountedFile: pub(self)
│   │   └── struct VfsBootstrapper: pub(crate)
│   ├── mod ipfs: pub(self)
│   │   └── struct IpfsVirtualFile: pub(self)
│   └── mod permission: pub(self)
│       ├── enum PermissionLevel: pub(crate)
│       ├── struct PermissionNode: pub(self)
│       ├── type PermissionNodeRef: pub(self)
│       └── struct PermissionsState: pub(crate)
└── mod wasm: pub(crate)
    ├── mod engine: pub(self)
    │   ├── struct BadEngineConfigError: pub(self)
    │   └── struct Engine: pub(crate)
    └── mod module: pub
        ├── struct BadWASMModuleError: pub(self)
        ├── struct Module: pub
        ├── struct ModuleId: pub(crate)
        ├── struct ModuleInstance: pub
        └── mod bench: pub #[cfg(feature = "bench")]
